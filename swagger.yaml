swagger: "2.0"
info:
  description: "APIs of Logistic Web Service"
  version: "1.0.0"
  title: "Logistic Web Service"
  contact:
    email: "d.bed11@gptgdt.net"
host: "localhost:8000"
basePath: "/api"
schemes:
- "http"
- "https"
tags:
- name: "auth"
  description: "Endpoint Authentication"
- name: "about"
  description: "Endpoint AboutUs"
- name: "contactUs"
  description: "Endpoint ContactUs"
- name: "tracking"
  description: "Tracking feature"
- name: "public"
  description: "Public assets of web service"
- name: "commitment"
  description: "Endpoint Commitment"
- name: "partner"
  description: "Endpoint Partner"
- name: "message"
  description: "Endpoint Message"
- name: "warehouse"
  description: "Endpoint Warehouse"
- name: "user"
  description: "Endpoint User"
- name: "car"
  description: "Endpoint Car"
- name: "prohibited-product"
  description: "Endpoint Prohibited Product"
- name: "road"
  description: "Endpoint Road"
- name: "bill"
  description: "Endpoint Bill"
- name: "participant"
  description: "Endpoint Participant"
- name: "quote"
  description: "Endpoint Quote"
- name: "order"
  description: "Endpoint Order"
- name: "orderIssues"
  description: "Endpoint OrderIssues"
- name: "product"
  description: "Endpoint Product"
- name: "career"
  description: "Endpoint Career"
- name: "department"
  description: "Endpoint Department"
- name: "applicant"
  description: "Endpoint Applicant"
- name: "feature"
  description: "Endpoint Feature"
- name: "consultancy"
  description: "Endpoint Consultancy"
- name: "notification"
  description: "Endpoint Notification for user's realtime interaction"
- name: "staff"
  description: "Endpoint Staff"
- name: "warehouse" 
  description: "Endpoint Warehouse" 
- name: "participant" 
  description: "Endpoint Participant" 
- name: "quote" 
  description: "Endpoint Quote"
- name: "service"
  description: "Endpoint Service"
- name: "distance"
  description: "Endpoint Distance"
- name: "price"
  description: "Endpoint Price"
- name: "priceList"
  description: "Endpoint PriceList"
- name: "customer"
  description: "Endpoint Customer"
- name: "turnover"
  description: "Endpoint Turnover"
- name: "carFleet"
  description: "Endpoint Carfleet"
- name: 'carriageContract'
  description: "Endpoint carriageContract"
- name: "carrepair"
  description: "Endpoint carrepair"
- name: "notificationtocarfleet"
  description: "Endpoint Notification"
- name: "blog"
  description: "Endpoint Blog"
- name: "excel"
  description: "Endpoint exportExcel"
- name: "individual-contract"
  description: "Endpoint individual-contract"
- name: "business-contract"
  description: "Endpoint business-contract"
- name: "totalcost"
  description: "Endpoint totalcost"
- name: "tax"
  description: "Endpoint tax"
- name: "insurance"
  description: "Endpoint insurance"
- name: "deliveryreport"
  description: "Endpoint deliveryreport"
- name: "discount"
  description: "Endpoint Discount"
- name: "suggest"
  description: "Endpoint Suggest"
- name: "shippingcost"
  description: "Endpoint shippingcost"
- name: "bankAccount"
  description: "Endpoint bankAccount"
- name: "orderNotification"
  description: "Endpoint orderNotification"    
- name : "compare-review"  
  description: "Endpoint compare-review"
- name: "policy"
  description: "Endpoint policy"  
- name: "post-office"
  description: "Endpoint post office"     
  
paths: 
  /admin/order/finance/cod/collecting:
    get:
      tags:
        - order
      summary: admin get COD not collected by cashier
      consumes:
        - application/json
      parameters:
      - in: query
        name: keyword
        type: string
        description: mã vận đơn
      - in: query
        name: beginDateSend
        type: date
        description: thời gian bắt đầu của ngày gửi hàng
      - in: query
        name: endDateSend
        type: date
        description: thời gian kết thúc của ngày gửi hàng
      - in: query
        name: beginDateReceive
        type: date
        description: thời gian bắt đầu của ngày ký nhận
      - in: query
        name: endDateReceive
        type: date
        description: thời gian kết thúc của ngày ký nhận
      - in: query
        name: department
        type: string
        description: tên bộ phận
      - in: query
        name: carFleet
        type: string
        description: tên hãng vận chuyển
      - in: query
        name: deliveryStaff
        type: string
        description: tên nhân viên giao nhận
      - in: query
        name: cashPayment
        type: string
        description: phương thức thanh toán
      - in: query
        name: codStatus
        type: string
        description: trạng thái của COD
      - in: query
        name: orderStatus
        type: string,
        description: trạng thái đơn hàng
      - in: query
        name: confirmStaff
        type: string,
        description: tên nhân viên thu ngân
      responses: 
        200: 
          description: Get COD successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get orders by delivery staff successfully: ",
              "data" : [
                {
                  "staff": {
                    "_id": "string",
                    "name": "string",
                    "address": "string",
                    "staff_type": "string",
                    "staff_position": "string",
                    "department": "string",
                    "car_fleet": "string",
                    "createdAt": "string",
                    "updatedAt": "string",
                    "__v": number,
                  },
                  "countPP": number,
                  "codPP": number,
                  "countCC": number,
                  "codCC": number,
                  "controlMoney": number,
                  "total": number,
                }
              ]
            }
        400:
          description: Get COD failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "COD not found",
            }
      security:
      - bearerAuth: []
    put:
      tags:
        - order
      summary: cashier collect COD
      consumes:
        - application/json
      parameters:
      - in: query
        name: keyword
        type: string
        description: mã vận đơn
      - in: query
        name: beginDateSend
        type: date
        description: thời gian bắt đầu của ngày gửi hàng
      - in: query
        name: endDateSend
        type: date
        description: thời gian kết thúc của ngày gửi hàng
      - in: query
        name: beginDateReceive
        type: date
        description: thời gian bắt đầu của ngày ký nhận
      - in: query
        name: endDateReceive
        type: date
        description: thời gian kết thúc của ngày ký nhận
      - in: query
        name: department
        type: string
        description: tên bộ phận
      - in: query
        name: carFleet
        type: string
        description: tên hãng vận chuyển
      - in: query
        name: deliveryStaff
        type: string
        description: tên nhân viên giao nhận
      - in: query
        name: cashPayment
        type: string
        description: phương thức thanh toán
      - in: query
        name: codStatus
        type: string
        description: trạng thái của COD
      - in: query
        name: orderStatus
        type: string,
        description: trạng thái đơn hàng
      - in: query
        name: confirmStaff
        type: string,
        description: tên nhân viên thu ngân
      responses: 
        200: 
          description: Collected COD successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "Collected COD successfully",
            }
        400:
          description: Get COD failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "COD not found",
            }
      security:
      - bearerAuth: []
  
  /admin/order/finance/cod/collected:
    get:
      tags:
        - order
      summary: admin get COD collected by cashier
      consumes:
        - application/json
      parameters:
      - in: query
        name: keyword
        type: string
        description: mã vận đơn
      - in: query
        name: beginCollected
        type: date
        description: thời gian bắt đầu của ngày thu COD
      - in: query
        name: endCollected
        type: date
        description: thời gian kết thúc của ngày thu COD
      - in: query
        name: deliveryStaff
        type: string
        description: tên nhân viên giao nhận
      - in: query
        name: cashPayment
        type: string
        description: phương thức thanh toán
      - in: query
        name: codStatus
        type: string
        description: trạng thái của COD
      - in: query
        name: orderStatus
        type: string,
        description: trạng thái đơn hàng
      - in: query
        name: confirmStaff
        type: string,
        description: tên nhân viên thu ngân
      - in: query
        name: serial
        type: string,
        description: số serial
      responses: 
        200: 
          description: Get COD successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get orders by delivery staff successfully: ",
              "data": [
                {
                  "time": "string",
                  "staff": "string",
                  "collectedBy": "string",
                  "money": number,
                  "cashPayment": [
                    "string",
                  ],
                  "cod": number,
                  "serial": "string",
                  "delivery_staff": {
                    "_id": "string",
                    "name": "string",
                    "address": "string",
                    "staff_type": "string",
                    "staff_position": "string",
                    "department": "string",
                    "car_fleet": "string",
                    "createdAt": "string",
                    "updatedAt": "string",
                    "__v": number,
                  },
                  "confirm_staff": {
                    "_id": "string",
                    "name": "string",
                    "address": "string",
                    "staff_type": "string",
                    "staff_position": "string",
                    "department": "string",
                    "car_fleet": "string",
                    "createdAt": "string",
                    "updatedAt": "string",
                    "__v": number,
                  }
                },
              ]
            }
        400:
          description: Get COD failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "COD not found",
            }
      security:
      - bearerAuth: []

  /admin/order/finance/cod/collected/detail:
    get:
      tags:
        - order
      summary: admin get COD collected detail
      consumes:
        - application/json
      parameters:
      - in: query
        name: keyword
        type: string
        description: mã vận đơn
      - in: query
        name: beginCollected
        type: date
        description: thời gian bắt đầu của ngày thu COD
      - in: query
        name: endCollected
        type: date
        description: thời gian kết thúc của ngày thu COD
      - in: query
        name: deliveryStaff
        type: string
        description: tên nhân viên giao nhận
      - in: query
        name: cashPayment
        type: string
        description: phương thức thanh toán
      - in: query
        name: codStatus
        type: string
        description: trạng thái của COD
      - in: query
        name: orderStatus
        type: string,
        description: trạng thái đơn hàng
      - in: query
        name: confirmStaff
        type: string,
        description: tên nhân viên thu ngân
      - in: query
        name: serial
        type: string,
        description: số serial
      responses: 
        200: 
          description: Get COD successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get orders by delivery staff successfully: ",
              "data": [
                {
                  "delivery_staff": {
                    "_id": "string",
                    "name": "string",
                    "address": "string",
                    "staff_type": "string",
                    "staff_position": "string",
                    "department": "string",
                    "car_fleet": "string",
                    "createdAt": "string",
                    "updatedAt": "string",
                    "__v": number,
                  },
                  "time_collected": "string",
                  "total": {
                    "string": {
                      "moneyPP": number,
                      "moneyCC": number,
                      "cod": number,
                      "count": number,
                    }
                  },
                  "table": [
                    {
                      "time": "string",
                      "orderId": "string",
                      "moneyPP": number,
                      "moneyCC": number,
                      "COD": number,
                    },
                  ]
                }
              ]
            }
        400:
          description: Get COD failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "COD not found",
            }
      security:
      - bearerAuth: []
  /admin/order/finance/cod:
    get:
      tags:
        - order
      summary: admin get COD not collected by cashier
      consumes:
        - application/json
      parameters:
      - in: query
        name: beginDateSend
        type: date
        description: thời gian bắt đầu của ngày gửi hàng
      - in: query
        name: endDateSend
        type: date
        description: thời gian kết thúc của ngày gửi hàng
      - in: query
        name: beginDateReceive
        type: date
        description: thời gian bắt đầu của ngày ký nhận
      - in: query
        name: endDateReceive
        type: date
        description: thời gian kết thúc của ngày ký nhận
      - in: query
        name: deliveryStaff
        type: string
        description: tên nhân viên giao nhận
      - in: query
        name: cashPayment
        type: string
        description: phương thức thanh toán
      - in: query
        name: codStatus
        type: string
        description: trạng thái của COD
      - in: query
        name: orderStatus
        type: string,
        description: trạng thái đơn hàng
      responses: 
        200: 
          description: Get COD successfully,
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get orders by delivery staff successfully: ",
              "data": [
                {
                  "deliveryStaff": {
                    "_id": "string",
                    "name": "string",
                    "address": "string",
                    "staff_type": "string",
                    "staff_position": "string",
                    "department": "string",
                    "car_fleet": "string",
                    "createdAt": "string",
                    "updatedAt": "string",
                    "__v": number,
                  },
                  "moneyPP": number,
                  "moneyCC": number,
                  "cod": number,
                  "total": number,
                  "moneyCollected": number,
                  "notCollected": number,
                  "count": number,
                  "codCollected": number,
                },
              ]
            }
        400:
          description: Get COD failed,
          schema:
            type: object
            example: {
              "success": false,
              "message": "COD not found",
            }
      security:
      - bearerAuth: []
  /admin/compare-review/time-up:
    get:
        tags:
          - compare-review
        summary: admin get all compare-review time-up
        responses:
          200:
            description: get all compare-review time-up successfully.
            schema:
              type: object
              example: {
                "success": true,
                "message": "get all compare-review time-up successfully.",
                "data": [
                  {
                    "_id": "string",
                    "customer": "string",
                    "order": "string",
                    "selected_date": "string",
                    "isSent": false,
                    "schedule_type": "string",
                    "createdAt": "string",
                    "updatedAt": "string",
                    "__v": 0,
                  },
                ]              
              }
          400:
            description: get all compare-review time-up failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "get all compare-review time-up failed.",
              }
        security:
        - bearerAuth: []
  /admin/compare-review:
    get:
        tags:
          - compare-review
        summary: admin get all compare-review
        responses:
          200:
            description: get all compare-review successfully.
            schema:
              type: object
              example: {
                "success": true,
                "message": "get all compare-review successfully.",
                "data": [
                  {
                    "_id": "string",
                    "customer": "string",
                    "order": "string",
                    "selected_date": "string",
                    "isSent": false,
                    "schedule_type": "string",
                    "createdAt": "string",
                    "updatedAt": "string",
                    "__v": 0,
                  },
                ]                    
              }
          400:
            description: get all compare-review failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "get all compare-review time-up failed.",
              }
        security:
        - bearerAuth: []
  /admin/compare-review/{id}/do-sendgmail:
    patch:
        tags:
          - compare-review
        summary: admin do compare-review and send gmail
        consumes:
          - application/json
        parameters:
        - in: path
          name: id
        responses:
          200:
            description: do compare-review and send gmail successfully.
            schema:
              type: object
              example: {
                "success": true,
                "message": "do compare-review and send gmail successfully.",              
              }
          400:
            description: udo compare-review and send gmail failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "do compare-review and send gmail failed.",
              }
        security:
        - bearerAuth: []
  /admin/compare-review/{id}:
    delete:
        tags:
          - compare-review
        summary: admin delete compare-review
        consumes:
          - application/json
        parameters:
        - in: path
          name: id
        responses:
          200:
            description: delete compare-review successfully.
            schema:
              type: object
              example: {
                "success": true,
                "message": "delete compare-review successfully.",              
              }
          400:
            description: delete compare-review failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "delete compare-review failed.",
              }
        security:
        - bearerAuth: []
  /compare-review/schedule_type:
    get : 
        tags:
          - compare-review
        summary: customer get compare-review schedule_type
        responses:
          200:
            description: get compare-review schedule_type successfully.
            schema:
              type: object
              example: {
                "success": true,
                "message": "get compare-review schedule_type successfully.",
                "data" : {
                  "schedule_type": "once_a_month",
                }
              }
          400:
            description: get compare-review schedule_type failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "get compare-review schedule_type failed.",
              } 
        security:
        - bearerAuth: []
  /compare-review:
    patch:
        tags:
          - compare-review
        summary: customer update schedual type of compare-review
        consumes:
          - application/json
        parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              schedule_type:
                type: string
                enum: ['once_a_day', 'once_a_week',  'twice_a_week','three_times_a_week','once_a_month','twice_a_month']
        security:
        - bearerAuth: []
        responses:
          200:
            description: update schedual type of compare-review successfully.
            schema:
              type: object
              example: {
                "success": true,
                "message": "update schedual type of compare-review successfully.",
                "data" : {
                  "_id": "id of compare-review",
                  "customer": "id of customer",
                  "orders": "[]",
                  "total_price": 0,
                  "isSent": false,
                  "schedule_type": "three_times_a_week",
                  "createdAt": "2023-06-08T04:58:56.271Z",
                  "updatedAt": "2023-06-08T07:03:50.965Z",
                  "__v": 0,
                  "selected_date": "2023-06-09T07:03:50.956Z",
                }
              }
          400:
            description: update schedual type of compare-review failed.
            schema:
              type: object
              example: {
                "success": false,
                "message": "update schedual type of compare-review failed.",
              }      
              
  /admin/policy:
    post:
        tags:
          - "policy"
        summary: create policy
        consumes:
          - application/json
        parameters:
        - in: body
          name: policy information
          required: true
          schema:
            type: object
            required: 
              - companyName
              - brc
              - issuedBy
              - privacyPolicy
            properties:
              companyName:
                type: string
              brc:
                type: string
              issuedBy:
                type: string
              privacyPolicy:
                type: string
              returnPolicy:
                type: object
                properties:
                  info:
                    type: array
                    items:
                      type: string
                  process:
                    type: array
                    items:
                      type: string
              complaints:
                type: object
                properties:
                  complaintTimeLimit:
                    type: array
                    items:
                      type: string
                  complaintResolutionTime:
                    type: array
                    items:
                      type: string
                  complaintTypes:
                    type: array
                    items:
                      type: object
                      properties:
                        serviceType:
                          type: string
                        responseTime:
                          type: string
                        resolutionTime:
                          type: string
              Compensation:
                type: object
                properties:
                  damagedGoods:
                    type: object
                    properties:
                      lost:
                        type: array
                        items:
                          type: string
                      damage:
                        type: array
                        items:
                          type: string
                      notice:
                        type: array
                        items:
                          type: string
                  operatingError:
                    type: array
                    items:
                      type: string
                  transportationQuality:
                    type: array
                    items:
                      type: object
                      properties:
                        category:
                          type: string
                        detail:
                          type: string
                        amount:
                          type: string
                  lossOfGoods:
                    type: object
                    properties:
                      regulation:
                        type: array
                        items:
                          type: string
                      noPriceDeclaration:
                        type: array
                        items:
                          type: string
                      priceDeclaration:
                        type: array
                        items:
                          type: object
                          properties:
                            case:
                              type: string
                            detail:
                              type: string
                      validDocument:
                        type: array
                        items:
                          type: string
                      compensation:
                        type: array
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                            level:
                              type: string
                            value:
                              type: string
                      notice:
                        type: array
                        items:
                          type: string
                  disclaimer:
                    type: array
                    items:
                      type: string
                  information:
                    type: array
                    items:
                      type: string
                  payment:
                    type: array
                    items:
                      type: string
              privacy:
                type: object
                properties:
                  collect:
                    type: string
                  purpose:
                    type: object
                    properties:
                      info:
                        type: string
                      customer:
                        type: array
                        items:
                          type: string
                      company:
                        type: array
                        items:
                          type: string
                  disclosure:
                    type: array
                    items:
                      type: string
                  method:
                    type: string
                  acceptance:
                    type: string
              others:
                type: array
                items:
                  type: object
        responses:
          200: 
            description: Create new Policy successfully
                "message": "Create new Policy successfully.",
                "data": {
                  "companyName": "string",
                  "brc": "string",
                  "issuedBy": "string",
                  "privacyPolicy": "string",
                  "returnPolicy": {
                    "info": [
                      "string",
                      "string",
                    ],
                    "process": [
                      "string",
                      "string",
                    ]
                  },
                  "complaints": {
                    "complaintTimeLimit": [
                      "string",
                      "string",
                    ],
                    "complaintResolutionTime": [
                      "string",
                      "string",
                    ],
                    "complaintTypes": [
                      {
                        "serviceType": "string",
                        "responseTime": "string",
                        "resolutionTime": "string",
                        "_id": "string",
                      },
                      {
                        "serviceType": "string",
                        "responseTime": "string",
                        "resolutionTime": "string",
                        "_id": "string",
                      }
                    ]
                  },
                  "Compensation": {
                    "damagedGoods": {
                      "lost": [
                        "string",
                        "string",
                      ],
                      "damage": [
                        "string",
                        "string",
                      ],
                      "notice": [
                        "string",
                        "string",
                      ]
                    },
                    "operatingError": [
                      "string",
                      "string",
                    ],
                    "transportationQuality": [
                      {
                        "category": "string",
                        "detail": "string",
                        "amount": "string",
                        "_id": "string",
                      },
                      {
                        "category": "Category 2",
                        "detail": "string",
                        "amount": "$200",
                        "_id": "string",
                      }
                    ],
                    "lossOfGoods": {
                      "regulation": [
                        "string",
                        "string",
                      ],
                      "noPriceDeclaration": [
                        "string",
                        "string",
                      ],
                      "priceDeclaration": [
                        {
                          "case": "string",
                          "detail": "string",
                          "_id": "string",
                        },
                        {
                          "case": "string",
                          "detail": "string",
                          "_id": "string",
                        }
                      ],
                      "validDocument": [
                        "string",
                        "string",
                      ],
                      "compensation": [
                        {
                          "type": "string",
                          "level": "string",
                          "value": "string",
                          "_id": "string",
                        },
                        {
                          "type": "string",
                          "level": "string",
                          "value": "string",
                          "_id": "string",
                        }
                      ],
                      "notice": [
                        "string",
                        "string",
                      ]
                    },
                    "disclaimer": [
                      "string",
                      "string",
                    ],
                    "information": [
                      "string",
                      "string",
                    ],
                    "payment": [
                      "string",
                      "string",
                    ]
                  },
                  "privacy": {
                    "collect": "string",
                    "purpose": {
                      "info": "string",
                      "customer": [
                        "string",
                        "string",
                      ],
                      "company": [
                        "string",
                        "string",
                      ]
                    },
                    "disclosure": [
                      "string",
                      "string",
                    ],
                    "method": "string",
                    "acceptance": "string",
                  },
                  "others": [],
                  "_id": "string",
                  "createdAt": "2023-06-07T09:44:56.824Z",
                  "updatedAt": "2023-06-07T09:44:56.824Z",
                  "__v": 0,
                }
          400:
            description: create policy fail
            schema:
              type: object
              example: {
                error1: {
                  "success": false,
                  "message": "Policy already exists",
                },
                error2: {
                  "success": false,
                  "message": [
                    "Company name field is required.",
                    "Business registration certificate field is required.",
                    "Licensing authority field is required.",
                    "Privacy policy field is required.",
                  ]
                }
              }
        security:
          - bearerAuth: []
    get: 
      tags:
      - "policy"
      summary: "admin get policy"
      produces: 
      - application/json
      parameters: 
        - in: query
          name: "page"
          type: number
        - in: query
          name: "pageSize"
          type: number            
      responses:
        200:
          description: Get Policy successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get Policy successfully.",
              "data": [],
            }
    put:
      tags:
        - "policy"
      summary: admin change information of a policy
      consumes:
        - application/json  
      parameters:
        - in: body
          name: policy information
          required: true
          schema:
            type: object
            required: 
              - companyName
              - brc
              - issuedBy
              - privacyPolicy
            properties:
              companyName:
                type: string
              brc:
                type: string
              issuedBy:
                type: string
              privacyPolicy:
                type: string
              returnPolicy:
                type: object
                properties:
                  info:
                    type: array
                    items:
                      type: string
                  process:
                    type: array
                    items:
                      type: string
              complaints:
                type: object
                properties:
                  complaintTimeLimit:
                    type: array
                    items:
                      type: string
                  complaintResolutionTime:
                    type: array
                    items:
                      type: string
                  complaintTypes:
                    type: array
                    items:
                      type: object
                      properties:
                        serviceType:
                          type: string
                        responseTime:
                          type: string
                        resolutionTime:
                          type: string
              Compensation:
                type: object
                properties:
                  damagedGoods:
                    type: object
                    properties:
                      lost:
                        type: array
                        items:
                          type: string
                      damage:
                        type: array
                        items:
                          type: string
                      notice:
                        type: array
                        items:
                          type: string
                  operatingError:
                    type: array
                    items:
                      type: string
                  transportationQuality:
                    type: array
                    items:
                      type: object
                      properties:
                        category:
                          type: string
                        detail:
                          type: string
                        amount:
                          type: string
                  lossOfGoods:
                    type: object
                    properties:
                      regulation:
                        type: array
                        items:
                          type: string
                      noPriceDeclaration:
                        type: array
                        items:
                          type: string
                      priceDeclaration:
                        type: array
                        items:
                          type: object
                          properties:
                            case:
                              type: string
                            detail:
                              type: string
                      validDocument:
                        type: array
                        items:
                          type: string
                      compensation:
                        type: array
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                            level:
                              type: string
                            value:
                              type: string
                      notice:
                        type: array
                        items:
                          type: string
                  disclaimer:
                    type: array
                    items:
                      type: string
                  information:
                    type: array
                    items:
                      type: string
                  payment:
                    type: array
                    items:
                      type: string
              privacy:
                type: object
                properties:
                  collect:
                    type: string
                  purpose:
                    type: object
                    properties:
                      info:
                        type: string
                      customer:
                        type: array
                        items:
                          type: string
                      company:
                        type: array
                        items:
                          type: string
                  disclosure:
                    type: array
                    items:
                      type: string
                  method:
                    type: string
                  acceptance:
                    type: string
              others:
                type: array
                items:
                  type: object 
      responses:
        200:
          description: Updated Policy successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Updated Policy successfully",
              "data": {
                
              }
            }
        400:
          description: Updated Policy failed
          schema:
            type: object
            example: {
              error1: {
                "success": false,
                "message": [
                  "Company name field is required.",
                  "Business registration certificate field is required.",
                  "Licensing authority field is required.",
                  "Privacy policy field is required.",
                ]
              },
              error2: {
                "success": false,
                "message": "Policy not found",
              }
            }
    delete:
      tags:
        - "policy"
      summary: "admin delete policy"
      produces:
        - application/json
      responses:
        200:
          description: Deleted policy successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Deleted policy successfully",
            }
        400:
          description: Delete FAQ failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Policy not found",
            }
      security:
        - bearerAuth: []
  /policy:
    get: 
      tags:
      - "policy"
      summary: "admin get policy"
      produces: 
      - application/json
      parameters: 
        - in: query
          name: "page"
          type: number
        - in: query
          name: "pageSize"
          type: number            
      responses:
        200:
          description: Get Policy successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get Policy successfully.",
              "data": [],
            }
            
  /admin/faq:
    post:
        tags:
          - "FAQ"
        summary: create new FAQ
        consumes:
          - application/json
        parameters:
        - in: body
          name: FAQ information
          required: true
          schema:
            type: object
            required: 
              - question
              - answer
            properties:
              question:
                type: string
              answer:
                type: string
        responses:
          200:
            description: Create new FAQ successfully
            schema:
              type: object
              example: {
                "success": true,
                "message": "Create new FAQ successfully.",
                "data": {
                  "question": "string",
                  "answer": "string",
                  "_id": "string",
                  "createdAt": "string",
                  "updatedAt": "string",
                  "__v": 0,
                },
              }
          400: 
            description: 
            schema:
              type: object
              example: {
                "error1": {
                  "success": false,
                  "message": [
                    "question field is required.",
                    "answer field is required.",
                  ],
                },
                "error2": {
                  "success": false,
                  "message": "This FAQ already exists",
                },
              }
        security:
          - bearerAuth: []
    get: 
      tags:
      - "FAQ"
      summary: "admin get FAQ list"
      produces: 
      - application/json
      parameters: 
        - in: query
          name: "page"
          type: number
        - in: query
          name: "pageSize"
          type: number
      responses:
        200:
          description: Get FAQs successfully
          schema: 
            type: object
            example: {
              "success": true,
              "message": "Get FAQs successfully",
              "data": [
                {
                  "_id": "string",
                  "question": "string",
                  "answer": "string",
                  "createdAt": "string",
                  "updatedAt": "string",
                  "__v": 0,
                },
              ]
            }
      security:
        - bearerAuth: []
  /admin/faq/{id}:
    get: 
      tags:
        - "FAQ"
      summary: "admin get a FAQ by id"
      produces: 
      - application/json
      parameters: 
        - in: path
          name: id
          type: string
          required: true
          description: Id of a FAQ
      responses:
        200:
          description: Get FAQ successfully
          schema: 
            type: object
            example: {
              "success": true,
              "message": "Get FAQs successfully",
              "data": {
                  "_id": "string",
                  "question": "string",
                  "answer": "string",
                  "createdAt": "string",
                  "updatedAt": "string",
                  "__v": 0,
                },
            }
        400:
          description: get FAQ with an invalid id or a wrong id
          schema:
            type: object
            example: {
              error1: {
                "success": false,
                "message": "Invalid ID",
              },
              error2: {
                "success": false,
                "message": "FAQ not found.",
              },
            }
      security:
        - bearerAuth: []
    put:
      tags:
        - "FAQ"
      summary: admin change information of a FAQ
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          description: id of a FAQ
        - in: body
          name: info
          required: true
          schema:
            type: object
            required: 
              - question
              - answer
            properties:
              question:
                type: string
              answer:
                type: string
      responses: 
        200: 
          description: Updated FAQ successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Updated FAQ successfully",
              "data": {
                  "_id": "string",
                  "question": "string",
                  "answer": "string",
                  "createdAt": "string",
                  "updatedAt": "string",
                  "__v": 0,
                },
            }
        400:
          description: ""
          schema:
            type: object
            example: {
              error1: {
                "success": false,
                "message": "Invalid ID",
              },
              error2: {
                "success": false,
                "message": "This FAQ already exists",
              },
              error3: {
                "success": false,
                "message": [
                  "question field is required.",
                  "answer field is required.",
                ],
              }
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - "FAQ"
      summary: "Delete a existing FAQ by id"
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: Id of a FAQ
      responses:
        200:
          description: Deleted FAQ successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Deleted FAQ successfully",
            }
        400:
          description: Delete FAQ failed.
          schema:
            type: object
            example: {
              error1: {
                "success": false,
                "message": "Invalid ID",
              },
              error2: {
                "success": false,
                "message": "FAQ not found",
              },
            }
      security:
        - bearerAuth: []
  /faq:
    get:
      tags:
      - "FAQ"
      summary: "admin get FAQ list"
      produces: 
      - application/json
      parameters: 
        - in: query
          name: "page"
          type: number
        - in: query
          name: "pageSize"
          type: number
        - in: query
          name: "question"
          type: string
        - in: body
          name: keyword
          description: filter the list with a question using a keyword
          required: true
          schema:
            type: object
            properties:
              keyword:
                type: string
      responses: 
        200: 
          description: Get FAQs successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get FAQs successfully",
              "data": [
                {
                  "_id": "string",
                  "question": "string",
                  "answer": "string",
                  "createdAt": "string",
                  "updatedAt": "string",
                  "__v": 0,
                },
              ]
            }
  /bankAccount/bank-update:
    post:
      tags:
      - "bankAccount"
      summary: "Update bank account information for authenticated users."
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: info
        required: true
        schema:
          type: object
          properties:
            bankName:
              type: string
            accountNumber:
              type: string
            branch:
              type: string
            bank_account_owner_name:
              type: string
            identity_card_number:
              type: string
            identity_card_front_image:
              type: string
            identity_card_back_image:
              type: string 
      responses:
        200:
          description: send otp code successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "send otp code successfully.",
            }
        400:
          description: Send OTP failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "send OTP failed.",
            }
      security:
        - bearerAuth: []
  /bankAccount/verify-otp:
    post:
      tags:
        - "bankAccount"
      summary: Verify OTP send through phone number.
      consumes:
        - application/json
      parameters:
      - in: body
        name: otp
        required: true
        schema:
          type: object
          properties:
            otp:
              type: string
      responses:
        200:
          description: Update bank account information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update bank account information successfully.",
            }
        400:
          description: validate failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "validate failed.",
            }
        404:
          description: Session error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Session error.",
            }
  /bankAccount/update-otp:
    post:
      tags:
        - "bankAccount"
      summary: Update OTP send through phone number.
      produces:
        - application/json
      parameters:
        - in: query
          name: verify_op
          type: string
          required: true
      responses:
        200:
          description: New OTP sent successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "New OTP sent successfully.",
            }
        400:
          description: Send OTP failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Send OTP failed.",
            }
        500:
          description: Internal server error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Internal server error.",
            }
  /bankAccount/:
    get:
      tags:
      - "bankAccount"
      summary: "Retrieve bank account information for the authenticated user."
      produces:
        - application/json
      responses:
        200:
          description: get about information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get about information successfully.",
              "data": {
                "bankName": "string",
                "accountNumber": "string",
                "branch": "string",
                "bank_account_number": "string",
                "bank_account_owner_name": "string",
                "identity_card_number": "string",
                "identity_card_front_image":"string",
                "identity_card_back_image":"string",
              },
            }
        500:
          description: Internal server error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Internal server error.",
            }
      security:
        - bearerAuth: []
  /shippingcost/suggest/start-point:
    post:
      tags:
      - "shippingcost"
      summary: "When the user enters a keyword, a list of address suggestions starts to appear"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: body
        name: keyword
        required: false
        schema:
          type: object
          properties:
            keyword:
              type: string
      responses:
        200:
          description: Show a list of suggestions.
          schema:
            type: object
            example: {
              "success": true,
              "data": {
                "address":[]
              }
            }
        401:
          description: null.
          schema:
            type: object
            example: {
              "data": {
                "address":[]
              }
            }
  /shippingcost/suggest/end-point:
    post:
      tags:
      - "shippingcost"
      summary: "When the user enters a keyword, a list of address suggestions starts to appear"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: body
        name: keyword
        required: false
        schema:
          type: object
          properties:
            keyword:
              type: string
      responses:
        200:
          description: Show a list of suggestions.
          schema:
            type: object
            example: {
              "success": true,
              "data": {
                "address":[]
              }
            }
        400:
          description: null.
          schema: 
            type: object
            example: {
              "data": {
                "address":[]
              }
            }
  /shippingcost/shipping-cost:
    post:
      tags:
      - "shippingcost"
      summary: "Calculate freight when user enters origin, destination and weight"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: body
        name: cost
        required: false
        schema:
          type: object
          properties:
            name1:
              type: string
            name2:
              type: string
            weight:
              type: string
            shippingtype:
              type: string
      responses:
        200:
          description: Offer freight rates.
          schema:
            type: object
            example: {
              "success": true,
              "data": {
                 "shippingCost":"string",
              }
            }
        400:
          description: null.
          schema: 
            type: object
            example: {
              "success": false,
              "message": "Please enter full information",
            }
  /auth/verify-token:
    post:
      tags:
      - "auth"
      summary: "Verify the post token, if it's expired, refresh token"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: body
        name: token
        required: true
        schema:
          type: object
          properties:
            accessToken:
              type: string
            refreshToken:
              type: string
      responses:
        200:
          description: Verify token successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Verify token successfully.",
              "data": {
                "user": {
                  "id": "_id",
                  "email": "example@test.net",
                  "phone": "12345678",
                  "role":{},
                }
              }
            }
        401:
          description: Unauthorized.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Unauthorized.",
            }
  /auth/register:
    post:
      tags:
      - "auth"
      summary: "Register customer"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: body
        name: customer
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            password:
              type: string
            verify_password:
              type: string
            phone:
              type: string
            address:
              type: string
            description:
              type: string
            customer_type:
              type: string
              enum: ['passers', 'intermediary']
            bank_name:
              type: string
            bank_account_number: 
              type: string
            verify_op:
              type: string
              enum: ['email', 'phone']
      responses:
        200:
          description: send otp code successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "send otp code successfully.",
            }
        400:
          description: Send OTP failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "send OTP failed.",
            }
  /auth/verify-otp:
    post:
      tags:
        - "auth"
      summary: Verify OTP send through email/phone number.
      consumes:
        - application/json
      parameters:
      - in: body
        name: otp
        required: true
        schema:
          type: object
          properties:
            otp:
              type: string
      responses:
        200:
          description: user registered successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "user registered successfully.",
            }
        400:
          description: validate failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "validate failed.",
            }
        404:
          description: Session error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Session error.",
            }
  /auth/update-otp:
    get:
      tags:
        - "auth"
      summary: Update OTP send through email/phone number.
      produces:
        - application/json
      parameters:
        - in: query
          name: verify_op
          type: string
          required: true
      responses:
        200:
          description: update otp successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "update otp successfully.",
            }
        404:
          description: verify option is invalid.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "verify option is invalid.",
              },
              "error2": {
                "success": false,
                "message": "Session error.",
              }
            }
        400:
          description: Send OTP failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Send OTP failed.",
            }
  /auth/register-mobile:
    post:
      tags:
      - "auth"
      summary: "Register customer by mobile app"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: body
        name: customer
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            password:
              type: string
            verify_password:
              type: string
            phone:
              type: string
            address:
              type: string
            name_product:
              type: string
            quantity_order: 
              type: number
            verify_op:
              type: string
              enum: ['phone', 'number']
      responses:
        200:
          description: send otp code successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "send otp code successfully.",
            }
        400:
          description: Send OTP failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "send OTP failed.",
            }
  /auth/mobile/verify-otp:
    post:
      tags:
        - "auth"
      summary: Verify OTP send through email/phone number by mobile app.
      consumes:
        - application/json
      parameters:
      - in: body
        name: otp
        required: true
        schema:
          type: object
          properties:
            otp:
              type: string
      responses:
        200:
          description: user registered successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "user registered successfully.",
            }
        400:
          description: validate failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "validate failed.",
            }
        404:
          description: Session error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Session error.",
            }
  /auth/login:
    post:
      tags:
        - "auth"
      summary: Customer login with email/phone and password.
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: user
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
            phone:
              type: string
            password:
              type: string
      responses:
        200:
          description: Login successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Login successfully.",
              "data": {
              "accessToken":"string",
              "refreshToken":"string",
              "user": {
                "id":"string",
                "email":"string",
                "phone":"string",
                "role": {
                  "_id": "_id",
                  "name": "string",
                  "address": "string",
                  "description": string,
                  "customer_type": "business",
                  "rank_passers": {
                    "point": number,
                    "level": "string",
                    "_id": "string",
                  },
                "companyTaxcode_business": "string",
                "bank_name": "string",
                "bank_account_name": "string",
                },
              }
              },
            }
        400:
          description: email/phone or password is wrong.
          schema:
            type: object
            example: {
              "success": false,
              "message": "email/phone or password is wrong.",
            }
        403:
          description: your role is not valid. access denied.
          schema:
            type: object
            example: {
              "success": false,
              "message": "your role is not valid. access denied.",
            }
  /auth/staff-login:
    post:
      tags:
        - "auth"
      summary: Staff login with email/phone and password.
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: user
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
            phone:
              type: string
            password:
              type: string
      responses:
        200:
          description: Login successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Login successfully.",
              "data": {
              "accessToken":"string",
              "refreshToken":"string",
              "user": {
                "id":"string",
                "email":"string",
                "phone":"string",
                "role": {
                  "_id": "_id",
                  "name": "string",
                  "staff_type": "string",
                },
              }
              },
            }
        400:
          description: email/phone or password is wrong.
          schema:
            type: object
            example: {
              "success": false,
              "message": "email/phone or password is wrong.",
            }
        403:
          description: your role is not valid. access denied.
          schema:
            type: object
            example: {
              "success": false,
              "message": "your role is not valid. access denied.",
            }
  /auth/forgot-pw:
    post:
      tags:
        - auth
      summary: help users renew their password
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: info
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
            phone:
              type: string
      responses:
        200:
          description: generate new password successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "generate new password successfully.",
            }
        400:
          description: send new password failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "send new password failed.",
            }
        404:
          description: email/phone doesn't exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "email/phone doesn't exist.",
            }
  /auth/change-pw:
    put:
      tags:
        - auth
      summary: user change current password
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: info
        required: true
        schema:
          type: object
          properties:
            oldPw:
              type: string
            newPw:
              type: string
            verify_password:
              type: string
      responses:
        200:
          description: change your password successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "change your password successfully.",
            }
        400:
          description: current password isn't correct.
          schema:
            type: object
            example: {
              "success": false,
              "message": "current password isn't correct.",
            }
      security:
        - bearerAuth: []
  /auth/logout:
    post:
      tags:
        - auth
      summary: user log out
      consumes:
        - application/json
      parameters:
      - in: body
        name: token
        required: true
        schema:
          type: object
          properties:
            refreshToken:
              type: string
      responses:
        200:
          description: log out successfully. see you soon.
          schema:
            type: object
            example: {
              "success": true,
              "message": "log out successfully. see you soon.",
            }
        401:
          description: refresh token is invalid.
          schema:
            type: object
            example: {
              "success": false,
              "message": "refresh token is invalid.",
            }
      security:
        - bearerAuth: []
  /admin/auth/register:
    post:
      tags:
        - auth
      summary: create a new staff
      consumes:
        - application/json
      parameters:
      - in: body
        name: staff informations
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
            address:
              type: string
            email:
              type: string
            password:
              type: string
            phone:
              type: string
            staff_type:
              type: string
              enum: ['admin','driver','shipper','storekeeper','staff']
            department:
              type: string  
            car_fleet:
              type: string
      responses:
        200:
          description: user registered successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "user registered successfully.",
            }
        400:
          description: user already exists.
          schema:
            type: object
            example: {
              "success": false,
              "message": "user already exists.",
            }
      security:
        - bearerAuth: []
  /about:
    get:
      tags:
        - about
      summary: get aboutUs information
      produces:
        - application/json
      responses:
        200:
          description: get about information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get about information successfully.",
              "data": {
                "description": "string",
                "vision": "string",
                "values": "string",
                "logo": "path",
                "banners": ["path1", "path2"],
              },
            }
        400:
          description: about information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "about information is not found.",
            }
  /admin/about/logo:
    post:
      tags:
        - about
      summary: upload logo aboutUs
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: logo
        required: true
        description: file
        type: file
      responses:
        200:
          description: upload logo successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "upload logo successfully.",
            }
      security:
        - bearerAuth: []
  /admin/about/banners:
    post:
      tags:
        - about
      summary: upload banners aboutUs
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: banners
        required: true
        description: array of files
        type: file
      responses:
        200:
          description: upload banners successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": " upload banners successfully.",
            }
      security:
        - bearerAuth: []
  /admin/about:
    post:
      tags:
        - about
      summary: update aboutUs informations
      consumes:
        - application/json
      parameters:
      - in: body
        name: about informations
        required: true
        schema:
          type: object
          properties:
            description:
              type: string
            vision:
              type: string
            values:
              type: string
      responses:
        200:
          description: set about-us information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "set about-us information successfully.",
            }
      security:
        - bearerAuth: []
  /contactUs:
    get:
      tags:
        - contactUs
      summary: get contactUs information
      produces:
        - application/json
      responses:
        200:
          description: get contact information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "set about-us information successfully.",
              "data": {
                "address":"string",
                "phone":"phone",
                "email":"email",
                "facebook":"url",
                "instagram":"url",
                "tiktok":"url",
                "youtube":"url",
                "hr_mailbox": "email",
              }
            }
        400:
          description: contact information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "contact information is not found.",
            }
  /admin/contactUs:
    post:
      tags:
        - contactUs
      summary: update contactUs informations
      consumes:
        - application/json
      parameters:
      - in: body
        name: contact informations
        required: true
        schema:
          type: object
          properties:
            address:
              type: string
            phone:
              type: string
            email:
              type: string
            facebook:
              type: string
            instagram:
              type: string
            tiktok:
              type: string
            youtube:
              type: string
            hr_mailbox:
              type: string
      responses:
        200:
          description: set contact-us information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "set contact-us information successfully.",
            }
      security:
        - bearerAuth: []
  
  /public/uploads/{dirName}/{fileName}:
    get:
      tags:
        - public
      summary: get uploaded resource
      parameters:
      - in: path
        name: dirName
        type: string
        required: true
        description: directory name of request file
      - in: path
        name: fileName
        type: string
        required: true
        description: file name of request file
      responses:
        200:
          description: resource file downloaded
          schema:
            type: file
  /public/{dirName}/{fileName}:
    get:
      tags:
        - public
      summary: get public assets
      parameters:
      - in: path
        name: dirName
        type: string
        required: true
        description: directory name of request file
      - in: path
        name: fileName
        type: string
        required: true
        description: file name of request file
      responses:
        200:
          description: resource file downloaded
          schema:
            type: file
  /commitment:
    get:
      tags:
        - "commitment"
      summary: get commitments
      produces:
        - application/json
      parameters:
        - in: query
          name: limit
          type: string
          description: limit number of commitment
        - in: query
          name: sortBy
          type: string
          description: sort in order (heading, -updatedAt)
        - in: query
          name: keyword
          type: string
          description: search by keyword
      responses:
        200:
          description: get commitments successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get commitment successful.",
              "data": {
                "length": "number",
                "commits": [
                  {
                    "_id": "630e17c7762611f726d07223",
                    "heading": "string",
                    "logo": "path",
                    "detail": "string",
                  },
                ]
              }             
            }
        400:
          description: commitment is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "commitment is not found.",
            }
  /commitment/{commitmentId}:
    get:
      tags:
        - "commitment"
      summary: get commitment by id
      produces:
        - application/json
      parameters:
        - in: path
          name: commitmentId
          type: string
          required: true
          description: Id of a commitment 
      responses:
        200:
          description: get commitment successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get commitment information successfully.",
              "data": {
                "_id": "id",
                "heading": "string",
                "logo": "path",
                "detail": "string",
              }              
            }
        400:
          description: commitment is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "commitment is not found.",
            }
  /admin/commitment:
    post:
      tags:
        - "commitment"
      summary: "Create a new commitment"
      consumes:
        - multipart/form-data
        - application/json
      parameters:
        - in: formData
          name: heading
          description: heading
          type: string
          required: true
        - in: formData
          name: detail
          description: detail
          type: string
        - in: formData
          name: logo
          description: a logo commitment.
          type: file
      responses:
        200:
          description: Create commitment successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create commitment successfully.",
              "data": {
                "heading": "string",
                "logo": "path",
                "detail": "string",
              }
            }
        400:
          description: Create commitment failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create commitment failed.",
            }
      security:
        - bearerAuth: []
  /admin/commitment/{commitmentId}:
    put:
      tags:
        - "commitment"
      summary: "Update a existing commitment"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: commitmentId
          schema: 
            type: string
          required: true
          description: commitment id
        - in: formData
          name: heading
          description: heading
          type: string
        - in: formData
          name: detail
          description: detail
          type: string
        - in: formData
          name: logo
          description: a logo commitment.
          type: file
      responses:
        200:
          description: Update commitment successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update commitment successfully.",
              "data": {
                "heading": "string",
                "logo": "path",
                "detail": "string",
              }
            }
        400:
          description: Update commitment failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Update commitment failed.",
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - "commitment"
      summary: "Delete a existing commitment"
      produces:
        - application/json
      parameters:
        - in: path
          name: commitmentId
          type: string
          required: true
          description: Id of a commitment 
      responses:
        200:
          description: Delete commitment successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete commitment successfully.",
            }
        400:
          description: Delete commitment failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Delete commitment failed.",
            }
      security:
        - bearerAuth: []
  /partner:
    get:
      tags:
        - "partner"
      summary: get partners
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: pageSize
          type: string
          description: number of partner in a page  
        - in: query
          name: sortBy
          type: string
          description: sort in order (name, -updatedAt)
        - in: query
          name: keyword
          type: string
          description: search by keyword
      responses:
        200:
          description: get partners successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get partner successful.",
              "data": {
                "length": "number",
                "partners": [
                  {
                    "_id": "id",
                    "name": "string",
                    "logo": "path",
                  },
                  
                ]
              }
            }
        400:
          description: partner is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "partner is not found.",
            }
  /partner/{partnerId}:
    get:
      tags:
        - "partner"
      summary: get partner by id
      produces:
        - application/json
      parameters:
        - in: path
          name: partnerId
          type: string
          required: true
          description: Id of a partner 
      responses:
        200:
          description: get partner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get partner successful.",
              "data": {
                "_id": "id",
                "name": "string",
                "logo": "path",
              }
            }
        400:
          description: partnerId is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "partner is not found.",
            }
  /admin/partner:
    post:
      tags:
        - "partner"
      summary: "Create a new partner"
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: name
          description: a new partner name.
          type: string
          required: true
        - in: formData
          name: logo
          description: a logo commitment.
          type: file  
          required: true      
      responses:
        200:
          description: Create partner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create partner successfully",
              "data": {
                "name": "string",
                "logo": "path",
              }
            }
        400:
          description: Create partner failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create partner failed.",
            }
      security:
        - bearerAuth: []
  /admin/partner/{partnerId}:
    put:
      tags:
        - "partner"
      summary: "Update a existing commitment"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: partnerId
          type: string
          required: true
          description: partner id
        - in: formData
          name: name
          description: a new partner name.
          type: string
        - in: formData
          name: logo
          description: a logo commitment.
          type: file  
      responses:
        200:
          description: Update partner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update partner successfully",
              "data": {
                "name": "string",
                "logo": "path",
              }
            }
        400:
          description: Update partner failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Update partner failed.",
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - "partner"
      summary: "Delete a existing partner"
      produces:
        - application/json
      parameters:
        - in: path
          name: partnerId
          type: string
          required: true
          description: partner Id
      responses:
        200:
          description: Delete partner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete partner successfully",
              "data": {
                "_id": "id",
                "name": "string",
                "logo": "path",
              }
            }
        400:
          description: Delete partner failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Delete partner failed.",
            }
      security:
        - bearerAuth: []
  /admin/message:
    get:
      tags:
        - "message"
      summary: get message
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: pageSize
          type: string
          description: number of message in a page          
        - in: query
          name: sortBy
          type: string
          description: sort in order (name, -updatedAt)
        - in: query
          name: keyword
          type: string
          description: search by keyword
        - in: query
          name: status
          type: string
          description: filter by status (seen/unseen)
      responses:
        200:
          description: get message successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get message information successfully.",
              "data": {
                "length": "number",
                "messages": [
                  {
                    "_id": "id",
                    "name": "string",
                    "email": "string",
                    "phone": "string",
                    "message": "string",
                    "status": "string",
                  }
                ]
              }          
            }          
        400:
          description: message information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "message information is not found.",
            }
      security:
        - bearerAuth: []
  /admin/message/{messageId}:
    get:
      tags:
        - "message"
      summary: get message by id
      produces:
        - application/json
      parameters:
        - in: path
          name: messageId
          type: string
          required: true
          description: Id of a message 
      responses:
        200:
          description: get message successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get message information successfully.",
              "data": {
                "_id": "id",
                "name": "string",
                "email": "string",
                "phone": "string",
                "message": "string",
                "status": "string",
              }         
            }          
        400:
          description: message information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "message information is not found.",
            }
      security:
      security:
        - bearerAuth: []
    put:
      tags:
        - "message"
      summary: "Update status of a existing message"
      consumes:
        - application/json
      parameters:
        - in: path
          name: messageId
          schema: 
            type: string
          required: true
          description: message id
        - in: body
          name: message
          description: a existing message's status.
          schema:
            type: object
            properties:
              status:
                type: string
      responses:
        200:
          description: Update message successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get message information successfully.",
              "data": {
                "status": "string",
              }         
            }          
        400:
          description: This message is not existed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "This message is not existed.",     
            }       
      security:
        - bearerAuth: []
    delete:
      tags:
        - "message"
      summary: "Delete a existing message"
      produces:
        - application/json
      parameters:
        - in: path
          name: messageId
          type: string
          required: true
          description: Id of a message 
      responses:
        200:
          description: Delete message successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete message successfully.",
            }                
        400:
          description: Message does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Message does not exist.",     
            }
      security:
        - bearerAuth: []
  /message:
    post:
      tags:
        - "message"
      summary: "Create a new message"
      consumes:
        - application/json
      parameters:
        - in: body
          name: message
          description: a new message.
          schema:
            type: object
            required:
              - name, email, phone, message
            properties:
              name:
                type: string
              email:
                type: string 
              phone: 
                type: string
              message:
                type: string 
      responses:
        200:
          description: Send email successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Send email successfully.",  
            }    
        400:
          description: Send email failed.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Send email failed.",  
            }    
  /user/customer:
    put:
      tags:
        - "user"
      summary: update customer 
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: customer
          description: update customer information
          schema:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
              phone:
                type: string
              address:
                type: string
              description:
                type: string
              taxcode:
                type: string
      responses:
        200:
          description: Update user's information successfully.
        400:
          description: Bad request
          schema:
            type: object
            example: {
              "error": {
                "success": false,
                "message": "Email/Phone is used.",
              }
            }
      security:
        - bearerAuth: []
  /user/staff:
    put:
      tags:
        - "user"
      summary: update staff 
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: staff
          description: update staff information
          schema:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
              phone:
                type: string
              department:
                type: string
              car_fleet:
                type: string
      responses:
        200:
          description: Update user's information successfully.
        400:
          description: Bad request
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Email/Phone is used.",
              },
              "error2": {
                "success": false,
                "message": "Department does not exist.",
              },
              "error3": {
                "success": false,
                "message": "Car Fleet does not exist.",
              }
            }
      security:
        - bearerAuth: []
  /user/delete:
    patch:
      tags:
        - "user"
      summary: delete account 
      produces:
        - application/json
      consumes:
        - application/json
      responses:
        200:
          description: delete successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Account has been deleted",
            }
        400:
          description: Bad request
          schema:
            type: object
            example: {
              "success": false,
              "message": "User not found",
              }
      security:
        - bearerAuth: []      
  /admin/user:
    get: 
      tags:
        - "user"
      summary: get list of user
      produces:
        - application/json      
      parameters:
        - in: query
          name: page
          type: string
          description: Number of page
        - in: query
          name: pageSize
          type: string
          description: Number of order in a page
        - in: query
          name: keyword
          type: string
          description: keyword       
        - in: query
          name: sortBy
          type: string
          description: sort by field, RegEx "[-]field[.[-]field]*"
        - in: query
          name: email
          type: string
          description: email       
        - in: query
          name: phone
          type: string
          description: phone
      responses:
        200:
          description: Get users successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get users successfully.",
              "data": {
                "length": "number",
                "users": [
                  
                ]
              }
            }
      security:
        - bearerAuth: []
  /admin/user/{id}:    
    get: 
      tags:
        - "user"
      summary: Customer get information of an user
      produces:
        - application/json     
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: id of an user 
      responses:
        200:
          description: Get user successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get user successfully.",
              "data": {
                
              }
            }          
        400:
          description: No information found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "No information found.",
            }
      security:
        - bearerAuth: []
  /admin/user/{id}/status:
    put:
      tags:
        - "user"
      summary: update status 
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          schema: 
            type: string
          required: true
          description: user id
        - in: body
          name: user
          description: a existing user.
          schema:
            type: object
            required:
              - isActive
            properties:
              isActive:
                type: Boolean
      requestBody:
        content: 
          multipart/form-data: 
            schema:            
              type: object
              properties:      
                name:           
                  type: string
      responses:
        200:
          description: Update active account successfully
        400:
          description: Bad request
          schema:
            type: object
            example: {
              "error": {
                "success": false,
                "message": "User does not existed",
              }
            }
      security:
        - bearerAuth: []
  /admin/car:
    get:
      tags:
        - "car"
      summary: get cars
      produces:
        - application/json
      parameters:
        - in: query
          name: car_type
          type: string
          description: car_type of car (ex 8_ton, 20_ton)
        - in: query
          name: plate
          type: string
          description: plate of car 
        - in: query
          name: page
          type: string
          description: number of page 
        - in: query
          name: pageSize
          type: string
          description: number of page size 
      responses:
        200:
          description: get car successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Get car successfully.",
                "data": {
                  "length": "number",
                  "listCar": [
                    {
                      "plate": "string",
                      "car_type": "string",
                      "volumn": "string",
                      "tonnage": "string",
                      "car_fleet": "string",
                      "insurance": {
                        "seri": "string",
                        "expired": "date",  
                      }
                    },
                  ],
                },
            }
        400:
          description: car in not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
      security:
        - bearerAuth: []
  /admin/car/{carId}:
    get:
      tags:
        - "car"
      summary: get car by id
      produces:
        - application/json
      parameters:
        - in: path
          name: carId
          type: string
          required: true
          description: Id of a car 
      responses:
        200:
          description: get car successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Get car successfully.",
                "data": {
                  "plate": "string",
                  "car_type": "string",
                  "volumn": "string",
                  "tonnage": "string",
                  "car_fleet": "string",
                   "insurance": {
                     "seri": "string",
                    "expired": "date",  
                  }
                },
            }
        400:
          description: CarId is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
      security:
        - bearerAuth: []
    put:
      tags:
        - "car"
      summary: Admin update car 
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - in: path
          name: carId
          type: string
          required: true
          description: Id of an car 
        - in: body
          name: road
          description: update car information
          schema:
            type: object
            required:
              - plate
              - car_type 
              - volumn
              - tonnage
              - car_fleet
              - seri
              - expired
            properties:
              plate: 
                  type: string
              car_type:
                type: string
                enum: ['8_ton', '20_ton']
              volumn: 
                  type: number
              tonnage:
                  type: number
              car_fleet:
                  type: string
              seri:
                  type: string
              expired:
                  type: string
      responses:
        200:
          description: Update car successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Update car successfully.",
                "data": {
                  "plate": "string",
                  "car_type": "string",
                  "volumn": "string",
                  "tonnage": "string",
                  "car_fleet": "string",
                },
            }
        400:
          description: Update car failed
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "ID does not exists.",
              },
              "error2": {
                "success": false,
                "message": "This car fleet is not existed.",
              },
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - "car"
      summary: "Delete a existing car"
      produces:
        - application/json
      parameters:
        - in: path
          name: carId 
          type: string
          required: true
          description: car Id
      responses:
        200:
          description: Delete car successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete car successfully.",
            }
        400:
          description: Delete car failed.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Car does not exist.",
            }
      security:
        - bearerAuth: []
  /admin/car/{carId}/fuel_control:
    get:
      tags:
        - "car"
      summary: control fuel consumption per car
      produces:
        - application/json
      parameters:
        - in: path
          name: carId
          type: string
          required: true
          description: Id of a car 
      responses:
        200:
          description: get car successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Get car successfully.",
                "data": {
                  "actual_fuel": "number",
                  "theoretical_fuel": "number",
                  "fuel difference": "number",
                },
            }
        400:
          description: CarId is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
      security:
        - bearerAuth: []
  /admin/car/create:
    post:
      tags:
        - "car"
      summary: "Create a new car"
      consumes:
        - application/json
      parameters:
        - in: body
          name: road        
          description: a new car.
          schema:
            type: object
            required:
              - plate
              - car_type 
              - volumn
              - tonnage
              - car_fleet
              - seri
              - expired
            properties:
              plate: 
                  type: string
              car_type:
                type: string
                enum: ['8_ton', '20_ton']
              volumn: 
                  type: number
              tonnage:
                  type: number
              car_fleet:
                  type: string
              seri:
                  type: string
              expired:
                  type: string
      responses:
        200:
          description: Create car successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "set car information successfully.",
            }
        400:
          description: Create car failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "This car plate is already existed.",
              }
              "error2": {
                  "success": false,
                  "message": "This car fleet is not existed.",
                }
            }
      security:
        - bearerAuth: []
  /prohibited-product:
    get:
      tags:
        - "prohibited-product"
      summary: get prohibited products
      produces:
        - application/json
      parameters:
        - in: query
          name: keyword
          type: string
          description: keyword of prohibited product 
        - in: query
          name: page
          type: string
          description: number of page 
        - in: query
          name: pageSize
          type: string
          description: number of page size 
      responses:
        200:
          description: get prohibited product successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Get prohobited product successfully.",
                "data": {
                  "length": "number",
                  "list": [
                    {
                      "name": "string",
                      "image": "path",
                      "detail": "string",
                    },
                  ]
                }
            }
        400:
          description: Prohibited product in not found.   
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
  /prohibited-product/{id}:
    get:
      tags:
        - "prohibited-product"
      summary: get prohibited product by id
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          required: true
          description: Id of a prohibited product 
      responses:
        200:
          description: get prohibited product successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Get information of prohibited product successfully.",
                "data": {
                  "name": "string",
                  "detail": "string",
                  "image": "path",
                }  
            }
        400:
          description: Id is not found. 
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information of prohibited product is not found.",
            }

  /admin/prohibited-product/create:
    post:
      tags:
        - "prohibited-product"
      summary: "Create a new prohibited product"
      consumes:
        - application/json
      parameters:
        - in: formData
          name: name
          type: string
          required: true
          description: name of prohibited product
        - in: formData
          name: detail
          type: string
          required: true
          description: detail of prohibited product
        - in: formData
          name: image
          type: file
          description: Image of prohibited product
      responses:
        200:
          description: Create prohibited product successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Create prohibied product successfully.",
                "data": {
                  "name": "string",
                  "image": "string",
                  "detail": "path",
                },
            }
        400:
          description: Create prohibited product failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Name is already existed.",
            }
      security:
        - bearerAuth: []
  /admin/prohibited-product/{id}:
    put:
      tags:
        - "prohibited-product"
      summary: "Update a existing prohibited product"
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          description: prohibited product id
        - in: formData
          name: name
          type: string
          description: name of prohibited product
        - in: formData
          name: detail
          type: string
          description: detail of prohibited product
        - in: formData
          name: image
          type: file
          description: Image of prohibited product
      responses:
        200:
          description: Update prohibited product successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Update prohibited product successfully.",
                "data": {
                  "name": "string",
                  "detail": "string",
                  "image": "path",
                },
            }
        400:
          description: Update prohibited product failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Name is existed.",
              }
              "error2": {
                "success": false,
                "message": "Prohibited product not exists.",
              }
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - "prohibited-product"
      summary: "Delete a existing prohibited product"
      produces:
        - application/json
      parameters:
        - in: path
          name: id 
          type: string
          required: true
          description: prohibited product Id
      responses:
        200:
          description: Delete prohibited product successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete prohibited product successfully.",
            }
        400:
          description: Update prohibited product failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Prohibited product not exists.",
            }
      security:
        - bearerAuth: []
  /admin/road:
    get:
      tags:
        - "road"
      summary: get roads
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of road on a page
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: keyword
          type: string
          description: keyword
        - in: query
          name: sortBy
          type: string
          description: sort by
        - in: query
          name: distance
          type: string
          description:  distance
        - in: query
          name: origin
          type: string
          description: origin
        - in: query
          name: destination
          type: string
          description:  destination
      responses:
        200:
          description: get road successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get road information successfully.",
              "data": {
                "length": "number",
                "road": [
                  {
                    "origin": "string",
                    "destination": "string",
                    "distance": "string",
                  },
                ]
              }
            }
        400:
          description: Road information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Road information is not found.",
            }
      security:
        - bearerAuth: []
  /admin/road/{roadId}:
    get:
      tags:
        - "road"
      summary: get road by id
      produces:
        - application/json
      parameters:
        - in: path
          name: roadId
          type: string
          required: true
          description: Id of a road 
      responses:
        200:
          description: get road successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get road information successfully.",
              "data": {
                "origin": "string",
                "destination": "string",
                "distance": "string",
              }
            }
        400:
          description: Road information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Road information is not found.",
            }
      security:
        - bearerAuth: []
    put:
      tags:
        - "road"
      summary: Admin update road 
      consumes:
        - application/json
      parameters:
        - in: path
          name: roadId
          type: string
          required: true
          description: Id of an road 
        - in: body
          name: road
          description: a new road.
          schema:
            type: object
            properties:
              distance: 
                  type: number
              origin:
                  type: string
              destination: 
                  type: string
      responses:
        200:
          description: Update road successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update road successfully.",
              "data": {
                "origin": "string",
                "destination": "string",
                "distance": "string",
              },
            }
        400:
          description: road cannot be found.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Origin does not exist.",
              }
              "error2": {
                "success": false,
                "message": "Destination does not exist.",
              }
              "error3": {
                "success": false,
                "message": "This road is not existed.",
              }
              "error4": {
                "success": false,
                "message": "This road is already existed.",
              }
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - "road"
      summary: "Delete an existing road"
      produces:
        - application/json
      parameters:
        - in: path
          name: roadId
          type: string
          required: true
          description: Id of an road 
      responses:
        200:
          description: Delete road successfully.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Delete road successfully.",
              "data": {
                "origin": "string",
                "destination": "string",
                "distance": "string",
              }
            }
        400:
          description: Delete road failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Road does not exist.",
            }
      security:
          - bearerAuth: []
  /admin/road/create:
    post:
      tags:
        - "road"
      summary: "Create a new road"
      consumes:
        - application/json
      parameters:
        - in: body
          name: road
          description: a new road.
          schema:
            type: object
            required:
              - distance
              - origin 
              - destination
            properties:
              distance:           
                  type: number
              origin: 
                  type: string
              destination: 
                  type: string
      responses:
        200:
          description: Set road information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Set road information successfully.",
            }
        400:
          description: Create road failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Origin does not exist.",
              },
              "error2": {
                "success": false,
                "message": "Destination does not exist.",
              },
            }
      security:
        - bearerAuth: []
  /admin/bill:
    get:
      tags:
        - "bill"
      summary: get bills
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of bill on a page
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: keyword
          type: string
          description: keyword
        - in: query
          name: sortBy
          type: string
          description: sort by
        - in: query
          name: service
          type: string
          description:  service
        - in: query
          name: road
          type: string
          description:  road
        - in: query
          name: car
          type: string
          description:  car
        - in: query
          name: driver
          type: string
          description:  driver
        - in: query
          name: status
          type: string
          description:  status (ex waiting, processing, completed)
      responses:
        200:
          description: get bill successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get bill information successfully.",
              "data": {
                "length": "number",
                "bills": [
                  {
                    "_id": "id",
                    "service": "string",
                    "road": "string",
                    "car": "string",
                    "driver": "string",
                    "product_shipments": [
                      {
                        "shipment": "string",
                        "turnover": "number",
                      },
                    ],
                    "status": "string",
                    "actual_fuel": "number",
                    "theoretical_fuel": "number",
                  },
                ]
              }
            }
        400:
          description: Bill information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Bill information is not found.",
            }
      security:
        - bearerAuth: []
  /admin/bill/{billId}:
    get:
      tags:
        - "bill"
      summary: get bill by id
      produces:
        - application/json
      parameters:
        - in: path
          name: billId
          type: string
          required: true
          description: Id of a bill 
      responses:
        200:
          description: get bill successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get bill successfully.",
              "data": {
                "_id": "id",
                "service": "string",
                "road": "string",
                "car": "string",
                "driver": "string",
                "product_shipments": [
                  {
                    "shipment": "id",
                    "turnover": "number",
                  },
                ],
                "status": "string",
                "actual_fuel": "number",
                "theoretical_fuel": "number",
              }
            }
        400:
          description: Bill information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Bill information is not found.",
            }
      security:
        - bearerAuth: []
    put:
      tags:
        - "bill"
      summary: Admin update bill 
      consumes:
        - application/json
      parameters:
        - in: path
          name: billId
          type: string
          required: true
          description: Id of an bill 
        - in: body
          name: bill
          description: a new bill.
          schema:
            type: object
            required:
              - product_shipment
            properties:
              service:
                type: string 
              road:
                type: string
              car:
                type: string 
              driver:
                type: string 
              product_shipment:
                type: string 
              status:
                type: string
                enum: ['waiting', 'accepted', 'processing', 'completed', 'refused']
      responses:
        200:
          description: Update bill  successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update bill successfully.",
              "data": {
                "service": "string",
                "road": "string",
                "car": "string",
                "driver": "string",
                "status": "string",
                "actual_fuel": "number",
                "theoretical_fuel":"number",
              },
            }
        400:
          description: bill cannot be found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "This bill is existed.",
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - "bill"
      summary: "Delete an existing bill"
      produces:
        - application/json
      parameters:
        - in: path
          name: billId
          type: string
          required: true
          description: Id of an bill 
      responses:
        200:
          description: Delete bill successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete product shipment successfully.",
              "data": {
                 "_id": "id",
                "service": "string",
                "road": "string",
                "car": "string",
                "driver": "string",
                "product_shipments": [
                  {
                    "shipment": "id",
                    "turnover": "number",
                  },
                ],
                "status": "string",
                "actual_fuel": "number",
                "theoretical_fuel": "number",
              },
            }
        400:
          description: Delete bill failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Bill does not exist.",
            }
      security:
          - bearerAuth: []
  /admin/bill/create:
    post:
      tags:
        - "bill"
      summary: "Create a new bill"
      consumes:
        - application/json
      parameters:         
        - in: body      
          name: bill
          description: a new bill.
          schema:
            type: object
            properties:
              service:
                type: string 
              road:
                type: string
              car:
                type: string 
              driver:
                type: string 
              actual_fuel:
                type: number 
              theoretical_fuel: 
                type: number 
              status:
                type: string
                enum: ['waiting', 'accepted', 'processing', 'completed', 'refused']
      responses:
        200:
          description: Set bill information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Set bill information successfully.",
            }
        400:
          description: Create bill failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Service/Road/Car/Car fleet/Driver does not exist.",
            }
      security:
        - bearerAuth: []
        
  /admin/bill/debt/driver:
    get:
      tags:
        - "bill"
      summary: get information about the driver debt
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of bill on a page
        - in: query
          name: page
          type: string
          description: number of page
        - in: query
          name: keyword
          type: string
          description: keyword
        - in: query
          name: sortBy
          type: string
          description: sortBy
        - in: query
          name: service
          type: string
          description: service
        - in: query
          name: road
          type: string
          description: road
        - in: query
          name: car
          type: string
          description: car
        - in: query
          name: driver
          type: string
          description: driver
        - in: query
          name: status
          type: string
          description: status ( waiting, processing, completed )
      responses:
        200:
          description: get bill successfully.
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get bill information successfully.",
              "data": {
                "length": "number",
                "totalCollect": "number",
                "totalPay": "number",
                "bills": [
                  {
                    "cost": "number",
                    "costDriver": "number",
                    "collect": "number",
                    "pay": "number",
                    "bill": {
                      "other_costs": {
                        "toll_cost": "number",
                        "police_cost": "number",
                        "food_cost": "number",
                        "carrepair_cost": "number",
                        "warehouse_cost": "number",
                        "other_cost": "number",
                      },
                      "current_fuel_price": "number",
                      "cost": "number",
                      "_id": "id",
                      "service": "string",
                      "road": "string",
                      "car": "string",
                      "driver": "string",
                      "status": "string",
                      "product_shipments": [
                        {
                          "shipment": "string",
                          "turnover": "number",
                          "_id": "string",
                        }
                      ],
                      "actual_fuel": "number",
                      "theoretical_fuel": "number",
                    }
                  }
                ]
              }
            }
        400:
          description: There is no bill with completed status
          schema:
            type: object
            example: {
              "success": false,
              "message": "There is no bill with completed status.",
            }
      security:
        - bearerAuth: []
    get:
      tags:
        - "bill"
      summary: get a list of Bills with storekeeper starting or ending point
      produces:
        - application/json
      parameters:
        - in: path
          name: billId
          type: string
          required: true
          description: Id of a bill 
      responses:
        200:
          description: Valid role.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get bill successfully.",
              "data": {
                "_id": "id",
                "service": "string",
                "road": "string",
                "car": "string",
                "driver": "string",
                "product_shipments": [
                  {
                    "shipment": "id",
                    "turnover": "number",
                  },
                ],
                "status": "string",
                "actual_fuel": "number",
                "theoretical_fuel": "number",
              }
            }
        400:
          description: Invalid role.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Forbidden.",
            }
      security:
        - bearerAuth: []

  /admin/bill/fee_ride/{billId}:
    post:
      tags:
        - "bill"
      summary: Fee of ride
      produces:
        - application/json
      parameters:
        - in: path
          name: billId
          type: string
          required: true
          description: Id Of bill
        - in: body
          name: Fee of ride
          description: Enter fee 
          schema:
            type: object
            properties:
              price_fuel:
                type: number
              tollFee:
                type: number
              whFee:
                type: number
              otherFee:
                type: number
      responses:
        200:
          description: Valid role.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get bill successfully.",
              "data": {
                "car": "string",
                "costOfRide": "number",
              }
            }
        400:
          description: Invalid role.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Forbidden.",
            }
      security:
        - bearerAuth: []
  /admin/bill/product_shipments/{billId}:
    post:
      tags:
        - "bill"
      summary: "Update a turnover, shipment of bill"
      consumes:
        - application/json
      parameters:
        - in: path
          name: billId
          type: string
          required: true
          description: Id of an bill 
        - in: body
          name: bill
          description: a new bill.
          schema:
            type: object
            properties:
              shipment:
                type: string 
              turnover:
                type: number
      responses:
        200:
          description: Add product shipment successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Add product shipment successfully.",
            }
        400:
          description: Update bill failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "The shipment/Bill is not existed",
            }
      security:
        - bearerAuth: []

  /admin/bill/report/info:
    get:
      tags:
        - "bill"
      summary: "get report of bill"
      consumes:
        - application/json
      responses:
        200:
          description: Get report successful.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get report successful.",
              "data": [
                {
                  "_id": "63969a8836f1d1f774332096",
                  "sender": null,
                  "receiver": "636db72036fc232c43f0a0bb",
                  "title": "Tài xế nhận bill",
                  "message": "Bạn cần nhận bill  637597a2aaa9e91c0a987d2a",
                  "status": false,
                  "createdAt": "2022-12-12T03:05:44.654Z",
                  "updatedAt": "2022-12-12T03:05:44.654Z",
                  "__v": 0,
                },
                {
                  "_id": "63969a9236f1d1f77433209a",
                  "sender": null,
                  "receiver": "636db72036fc232c43f0a0bb",
                  "title": "Tài xế nhận bill",
                  "message": "Bạn cần nhận bill  636dbaad36fc232c43f0a0ca",
                  "status": false,
                  "createdAt": "2022-12-12T03:05:54.431Z",
                  "updatedAt": "2022-12-12T03:05:54.431Z",
                  "__v": 0,
                },
              ]
            }
        400:
          description: Get report of bill failed
          schema:
            type: object
            example: {
              "success": false,
              "message": "Not information found.",
            }
      security:
        - bearerAuth: []
  /bill/{billId}:
    get:
      tags:
        - "bill"
      summary: get a list of Bills with storekeeper starting or ending point
      produces:
        - application/json
      parameters:
        - in: path
          name: billId
          type: string
          required: true
          description: Id of a bill 
      responses:
        200:
          description: Valid role.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get bill successfully.",
              "data": {
                "_id": "id",
                "service": {
                  "_id": "string",
                  "name": "string",
                  "sub_detail": "string",
                  "target": "string",
                  "tip": "number",
                  "quotes": [quote1, quote2],
                  "logo": "path",
                  "banner": "path",
                  "features": [feature1, feature2],
                  "participants": [participant1, participant2],
                  "price": "string",
                  "distances": [distance1, distance2],
                  "price_files": [
                    {
                      "province": "string",
                      "file": "path",
                      "_id": "string",
                    }
                  ]
                },
                "road": {
                  "_id": "string",
                  "origin": {
                    "_id": "string",
                    "name": "string",
                    "phone": "string",
                    "street": "string",
                    "ward": "string",
                    "district": "string",
                    "province": "string",
                    "lon": "number",
                    "lat": "number",
                    "storekeeper": "string",
                    "turnover": "number",
                    "inventory_product_shipments": [
                      {
                        "shipments": "string",
                        "turnover": "number",
                        "status": "string",
                      }
                    ]
                  },
                  "destination": {
                    "_id": "string",
                    "name": "string",
                    "phone": "string",
                    "street": "string",
                    "ward": "string",
                    "district": "string",
                    "province": "string",
                    "lon": "number",
                    "lat": "number",
                    "storekeeper": "string",
                    "turnover": "number",
                    "inventory_product_shipments": [
                      {
                        "shipments": "string",
                        "turnover": "number",
                        "status": "string",
                      }
                    ]
                  }
                },
                "car": {
                  "insurance": {
                    "seri": "string",
                    "expired": "datetime",
                  },
                  "_id": "string",
                  "plate": "number",
                  "car_type": "string",
                  "volumn": "number",
                  "tonnage": "number",
                  "car_fleet": "string",
                },
                "driver": {
                  "staff_position": "string",
                  "_id": "string",
                  "name": "string",
                  "staff_type": "string",
                },
                "product_shipments": [
                  {
                    "shipment": "id",
                    "turnover": "number",
                    "_id": "string",
                  }
                ],
                "status": "string",
                "actual_fuel": "number",
                "theoretical_fuel": "number",
              }
            }
        400:
          description: Invalid role.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Forbidden.",
            }
      security:
        - bearerAuth: []

  /bill/{billId}/driver:
    get:
      tags:
        - "bill"
      summary: get inforamtion of bills by driver
      produces:
        - application/json
      parameters:
        - in: path
          name: billId
          type: string
          required: true
          description: Id of a bill 
      responses:
        200:
          description: Valid role.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get bill successfully.",
              "data": {
                "_id": "id",
                "service": "object",
                "road": "string",
                "car": "string",
                "driver": "string",
                "product_shipments": [
                  {
                    "shipment": "id",
                    "turnover": "number",
                  },
                ],
                "status": "string",
                "actual_fuel": "number",
                "theoretical_fuel": "number",
              }
            }
        400:
          description: Invalid role.
          schema:
            type: object
            example: {
              "success": false,
              "message": "There was no information found.",
            }
      security:
        - bearerAuth: []

  /bill/{billId}/actual_fuel:
    put:
      tags:
        - "bill"
      summary: put about actual fuel of bill by driver
      consumes:
        - application/json
      parameters:
        - in: path
          name: billId
          type: string
          required: true
          description: Id of an bill
        - in: body
          name: bill
          description: update actual fuel.
          schema:
            type: object
            properties:
              actual_fuel:
                type: number
      responses:
        200:
          description: Valid login account.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update actual fuel successfully.",
              "data": {
                "actual_fuel": "number",
              },
            }
        400:
          description: Incorrect login account.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Forbidden.",
            }
      security:
        - bearerAuth: []
  /bill/{id}:
    put:
      tags:
        - "bill"
      summary: put about information of bill by driver
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          required: turnover
          description: Id of an bill
        - in: body
          name: bill
          description: update information of bill
          schema:
            type: object
            properties:
              current_fuel_price:
                type: number
              toll_cost:
                type: number
              police_cost:
                type: number
              food_cost:
                type: number
              carrepair_cost:
                type: number
              warehouse_cost:
                type: number
              other_cost:
                type: number
      responses:
        200:
          description: Valid loin account.
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Update bill successfully.",
              "data": {
                "current_fuel_price": "number",
                "toll_cost": "number",
                "police_cost": "number",
                "food_cost": "number",
                "carrepair_cost": "number",
                "warehouse_cost": "number",
                "other_cost": "number",
              },
            }
        400:
          description: Incorrect login account
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Forbidden.",
            }
      security:
        - bearerAuth: []
  /admin/consultancy:
    get:
      tags:
        - "consultancy"
      summary: get consultancy
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: pageSize
          type: string
          description: number of consultancy in a page 
        - in: query
          name: keyword
          type: string
          description: search by keyword
        - in: query
          name: status
          type: string
          description: filter by value true/false
        - in: query
          name: sortBy
          type: string
          description: sort by field, -updatedAt        
      responses:
        200:
          description: Get consultancy information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get consultancy information successfully.",
              "data": {
                "length": "number",
                "consultancy": [
                  {
                  "name": "string",
                  "email": "string",
                  "phone": "string",
                  "service" : "string",
                  "fulladdress" : "string",
                  "parcel": "string",
                  "quantity": number,
                  "solved_status": "boolean",
                  }
                ]
              }
            }
        400:
          description: Consultancy information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Consultancy information is not found.",
            }
      security:
        - bearerAuth: []
  /admin/consultancy/{consultancyId}:
    get:
      tags:
        - "consultancy"
      summary: get consultancy by id
      produces:
        - application/json
      parameters:
        - in: path
          name: consultancyId
          type: string
          required: true
          description: Id of a consultancy 
      responses:
        200:
          description: Get consultancy information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get consultancy information successfully.",
              "data": {
                "name": "string",
                "email": "string",
                "phone": "string",
                "service" : "string",
                "fulladdress" : "string",
                "parcel": "string",
                "quantity": "string",    
                "solved_status": "boolean",
              }
            }          
        400:
          description: consultancy is not found.    
          schema:
            type: object
            example: {
              "success": false,
              "message": "Consultancy information is not found.",
            }
      security:
        - bearerAuth: []
    put:
      tags:
        - "consultancy"
      summary: "Update a existing consultancy"
      consumes:
        - application/json
      parameters:
        - in: path
          name: consultancyId
          schema: 
            type: string
          required: true
          description: consultancy id
        - in: body
          name: consultancy
          description: an updated consultancy.
          schema:
            type: object
            properties:
              service:
                type: string
              name:
                type: string
              email:
                type: string 
              phone: 
                type: string    
              district:
                type: string
              province:
                type: string
              ward:
                type: string          
              fulladdress:
                type: string 
              parcel: 
                type: string
              quantity:
                type: number 
              solved_status:
                type: boolean
      responses:
        200:
          description: Update consultancy successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update consultancy successfully.",
              "data": {
                "name": "string",
                "email": "string",
                "phone": "string",
                "service" : "string",
                "district": "string",
                "province": "string",
                "ward": "string",
                "fulladdress" : "string",
                "parcel": "string",
                "quantity": "string",    
                "solved_status": "boolean",
              }
            }
        400:
          description: Update consultancy failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "This consultancy is not existed.",
              }
              "error2": {
                "success": false,
                "message": "The service is not existed.",
              }
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - "consultancy"
      summary: "Delete a existing consultancy"
      produces:
        - application/json
      parameters:
        - in: path
          name: consultancyId
          type: string
          required: true
          description: Id of a consultancy 
      responses:
        200:
          description: Delete consultancy successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete successfully.",
            }
        400:
          description: Delete consultancy failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Consultancy does not exist.",
            }
      security:
        - bearerAuth: []
  /consultancy:
    post:
      tags:
        - "consultancy"
      summary: "Create a new consultancy"
      consumes:
        - application/json
      parameters:
        - in: body
          name: consultancy
          description: a new consultancy.
          schema:
            type: object            
            properties:
              service:
                type: string
              name:
                type: string
              email:
                type: string 
              phone: 
                type: string    
              district:
                type: string
              province:
                type: string
              ward:
                type: string          
              fulladdress:
                type: string 
              parcel: 
                type: string
              quantity:
                type: number 
              solved_status:
                type: boolean
      responses:
        200:
          description: Send consultancy successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Send email successfully.",
            }
        400:
          description: Create consultancy failed. 
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Send email failed.",
              }
              "error2": {
                "success": false,
                "message": "The service is not existed.",
              }
            }
  /admin/warehouse:
    post:
      tags:
        - "warehouse"
      summary: "Create a new warehouse"
      consumes:
        - application/json
      parameters:
        - in: body
          name: warehouse
          description: a new warehouse.
          schema:
            type: object      
            required: 
            - name, street, ward, district, province, phone     
            properties:
              name:
                type: string
              phone: 
                type: string
              street:
                type: string               
              ward:
                type: string 
              district: 
                type: string
              province:
                type: string
              storekeeper:
                type: string
      responses:
        200:
          description: Create new warehouse successfully.
          schema:
            type: object
            example:  {
              "success": true,
              "message": "Create new warehouse successfully.",
            }
        400:
          description: Error
          schema:
            type: object
            example:  {
              "error1": {
                "success": false,
                "message": "Supplied address does not exist.",
              },
              "error2": {
                "success": false,
                "message": "the warehouse's name is existed.",
              }
            }
      security:
        - bearerAuth: []
  /admin/warehouse/{warehouseId}:
    put:
      tags:
        - "warehouse"
      summary: "Update a existing warehouse"
      consumes:
        - application/json
      parameters:
        - in: path
          name: warehouseId
          schema: 
            type: string
          required: true
          description: warehouse id
        - in: body
          name: warehouse
          description: a existing warehouse.
          schema:
            type: object
            properties:
              name:
                type: string
              phone: 
                type: string
              street:
                type: string               
              ward:
                type: string 
              district: 
                type: string
              province:
                type: string
              storekeeper:
                type: string               
      responses:
        200:
          description: Update warehouse successfully.
          schema:
            type: object
            example:  {
              "success": true,
              "message": "Update warehouse successfully",
              "data": {
                "name": "string",
                "phone": "string",
                "street": "string",
                "ward": "string",
                "district": "string",
                "province": "string",
                "lon": "number",
                "lat": "number",
              }
            }
        400:
          description: Update warehouse failed.
          schema:
            type: object
            example:  {
              "error1": {
                "success": false,
                "message": "Supplied address does not exist.",
              },
              "error2": {
                "success": false,
                "message": "the warehouse's name is existed.",
              },
              "error3": {
                "success": false,
                "message": "New name is existed.",
              },
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - "warehouse"
      summary: "Delete a existing warehouse"
      produces:
        - application/json
      parameters:
        - in: path
          name: warehouseId
          type: string
          required: true
          description: Id of a warehouse 
      responses:
        200:
          description: Delete warehouse successfully.
          schema:
            type: object
            example:  {
              "success": true,
              "message": "Delete warehouse successfully.",
              "data": {
                "_id": "id",
                "name": "string",
                "phone": "string",
                "street": "string",
                "ward": "string",
                "district": "string",
                "province": "string",
                "lon": "number",
                "lat": "number",
              }
            }
        400:
          description: Delete warehouse failed.
          schema:
            type: object
            example:  {
              "success": false,
              "message": "Warehouse does not exist",
            }
      security:
        - bearerAuth: []
  /warehouse:
    get:
      tags:
        - "warehouse"
      summary: get warehouse
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: pageSize
          type: string
          description: number of warehouse in a page 
        - in: query
          name: district
          type: string
          description: district
        - in: query
          name: province
          type: string
          description: province
        - in: query
          name: sortBy
          type: string
          description: sort in order (name, -updatedAt)
      responses:
        200:
          description: get warehouse successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get warehouse successful.",
              "data": {
                "length": "number",
                "warehouses": [
                  {
                    "_id": "id",
                    "name": "string",
                    "phone": "string",
                    "street": "string",
                    "ward": "string",
                    "district": "string",
                    "province": "string",
                    "lon": "number",
                    "lat": "number",
                    "storekeeper": "id",
                    "turnover": "number",
                    "inventory_product_shipments": [
                      {
                        "shipment": "id",
                        "turnover": "number",
                        "status": "string",
                        "_id": "id",
                      },
                    ],
                  }
                ]
              }     
            }
        400:
          description: No warehouse found
          schema:
            type: object
            example: {
              "success": false,
              "message": "No warehouse found",
            }
  /warehouse/{warehouseId}:
    get:
      tags:
        - "warehouse"
      summary: get warehouse by id
      produces:
        - application/json
      parameters:
        - in: path
          name: warehouseId
          type: string
          required: true
          description: Id of a warehouse 
      responses:
        200:
          description: get warehouse successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get warehouse successful.",
              "data": {
                "_id": "id",
                "name": "string",
                "phone": "string",
                "street": "string",
                "ward": "string",
                "district": "string",
                "province": "string",
                "lon": "number",
                "lat": "number",
                "storekeeper": "id",
                "turnover": "number",
                "inventory_product_shipments": [
                  {
                    "shipment": "id",
                    "turnover": "number",
                    "status": "string",
                    "_id": "id",
                  },
                ],
              }     
            }
        400:
          description: No warehouse found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "No warehouse found",
            }
  /warehouse/add-inventory/{warehouseId}:
    put:
      tags:
        - "warehouse"
      summary: add inventory product shipment to warehouse for storekeeper
      produces:
        - application/json
      parameters:
        - in: path
          name: warehouseId
          type: string
          required: true
          description: Id of a warehouse
        - in: body
          name: warehouse
          description: inventory product shipment.
          schema:
            type: object
            properties:
              productShipmentId:
                type: string
              turnover:
                type: number
      responses:
        200:
          description: Add  product shipment successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Add  product shipment successfully.",
            }
        400:
          description: Add  product shipment failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "No information",
            }
      security:
        - bearerAuth: []
  /warehouse/update-inventory/{warehouseId}:
    put:
      tags:
        - "warehouse"
      summary: change inventory status of warehouse for storekeeper
      produces:
        application/json
      parameters:
        - in: path
          name: warehouseId
          type: string
          required: true
          description: Id of a warehouse
        - in: body
          name: warehouse
          description: inventory product shipment and status.
          schema:
            type: object
            properties:
              productShipmentId:
                type: string
              status:
                type: string
      responses:
        200:
          description: Update inventory status successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "${status} successfully",
            }
        400:
          description: Update inventory status failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "No information.",
              },
              "error2": {
                "success": false,
                "message": "This product shipment can not be found in this warehouse.",
              },
              
            }
      security:
        - bearerAuth: []
  /participant:
     get:
      tags:
        - "participant"
      summary: get all participant
      produces:
        - application/json
      parameters:        
        - in: query
          name: limit
          type: string
          description: number of participant in a page         
        - in: query
          name: keyword
          type: string
          description: search by keyword
        - in: query
          name: sortBy
          type: string
          description: sort in order (name, -updatedAt)
      responses:
        200:
          description: get participant successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get participant successfully.",
              "data": [
                {
                  "name": "string",
                  "banner": "path",    
                  "description": "string",
                },
              ]
            }
        400:
          description: participant is not found. 
          schema:
            type: object 
            example: {
              "success": false,
              "message": "No information found.",
            }
  /participant/{participantId}:
    get:
      tags:
        - "participant"
      summary: get participant by id
      produces:
        - application/json
      parameters:
        - in: path
          name: participantId
          type: string
          required: true
          description: Id of a participant 
      responses:
        200:
          description: get participant successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get participant successfully.",
              "data": {
                "name": "string",
                "banner": "path",    
                "description": "string",
              },
            }
        400:
          description: participant is not found.
          schema:
            type: object 
            example: {
              "success": false,
              "message": "No information found.",
            } 
  /participant/service/{serviceId}:
    get:
      tags:
        - "participant"
      summary: get list of participants by serviceId
      produces:
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
      responses:
        200:
          description: Get participant successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get participant successfully.",
              "data": [
                {
                  "name": "string",
                  "banner": "path",    
                  "description": "string",     
                },
              ] 
            }          
        400:
          description: participant is not found.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Service is not existed",
            }  
  /admin/participant/{serviceId}:
    post:
      tags:
        - "participant"
      summary: "Create a new participant"
      consumes: 
        - multipart/form-data
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
        - in: formData
          name: name
          description: name of participant.
          type: string  
          required: true
        - in: formData
          name: description
          description: description of participant.
          type: string  
          required: true
        - in: formData
          name: banner
          description: banner of participant.
          type: file  
      responses:
        200:
          description: Create participant successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create participant successfully.",
              "data": {
                "name": "string",
                "banner": "path",    
                "description": "string",       
              },
            }        
        400:
          description: Create participant failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Service is not existed.",
            }
      security:
        - bearerAuth: []
  /admin/participant/{participantId}:
    put:
      tags:
        - "participant"
      summary: "Update an existing participant"
      consumes: 
        - multipart/form-data
      parameters:
        - in: path
          name: participantId
          type: string
          description: Id of a participant
        - in: formData
          name: name
          description: name of participant.
          type: string  
        - in: formData
          name: description
          description: description of participant.
          type: string 
        - in: formData
          name: banner
          description: banner of participant.
          type: file     
      requestBody:
        content:
          multipart/form-data:
            schema:            
              type: object
              properties:     
                name:           
                  type: string
                banner:
                  type: string
                  format: base64
                description:  
                  type: string
      responses:
        200:
          description: Update participant successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update participant successfully.",
              "data": {
                "name": "string",
                "banner": "path",    
                "description": "string",     
              },
            }        
        400:
          description: Create participant failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "New name is existed",
              },
              "error2": {
                "success": false,
                "message": "Participant does not exist.",
              },
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - "participant"
      summary: "Delete a existing participant"
      produces:
        - application/json
      parameters:
        - in: path
          name: participantId
          type: string
          required: true
          description: Id of a participant 
      responses:
        200:
          description: Delete participant successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Deleted participant successfully.",
            }
        400:
          description: Delete participant failed.
          schema:
            type: object
            example: {
              "success": false,
              "message" : "Participant does not exist.",
            }
      security:
        - bearerAuth: []
  /quote:
     get:
      tags:
        - "quote"
      summary: get all quote
      produces:
        - application/json
      parameters:        
        - in: query
          name: limit
          type: string
          description: number of participant in a page         
        - in: query
          name: keyword
          type: string
          description: search by keyword
        - in: query
          name: sortBy
          type: string
          description: sort in order (name, -updatedAt)
      responses:
        200:
          description: get quote successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get quote successfully.",
              "data": [
                {
                  "name": "string",
                  "description": "string", 
                  "quote": "string",
                  "avatar": "path",
                },
              ]
            }
        400:
          description: quote is not found. 
          schema:
            type: object
            example: {
              "success": false,
              "message": "No information found.",
            }
  /quote/{quoteId}:
    get:
      tags:
        - "quote"
      summary: get quote by id
      produces:
        - application/json
      parameters:
        - in: path
          name: quoteId
          type: string
          required: true
          description: Id of a quote 
      responses:
        200:
          description: Get quote successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get quote successfully.",
              "data":{
                "name": "string",
                "description": "string", 
                "quote": "string",
                "avatar": "path",
              },
            }
        400:
          description: Quote is not found. 
          schema:
            type: object
            example: {
              "success": false,
              "message": "No information found.",
            }
  /quote/service/{serviceId}:
    get:
      tags:
        - "quote"
      summary: get list of quotes by serviceId
      produces:
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
      responses:
        200:
          description: Get quote successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get quote successfully.",
              "data": [
                {
                "name": "string",
                "description": "string", 
                "quote": "string",
                "avatar": "path",    
                },
              ]
            }          
        400:
          description: quote is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Service is not existed.",
            }
  /admin/quote/{serviceId}:
    post:
      tags:
        - "quote"
      summary: "Create a new quote"
      consumes:
        - multipart/form-data
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
        - in: formData
          name: name
          description: name of customer.
          type: string 
          required: true
        - in: formData
          name: description
          description: description of customer.
          type: string 
          required: true
        - in: formData
          name: quote
          description: detail of quote.
          type: string 
          required: true  
        - in: formData
          name: avatar
          description: avatar of quote.
          type: file   
      responses:
        200:
          description: Create quote successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Created quote successfully.",
              "data": {
                "name": "string",
                "description": "string", 
                "quote": "string",
                "avatar": "path",    
              }
            }        
        400:
          description: Create quote failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Service is not existed.",
              },
              "error2": {
                "success": false,
                "message": "This person is existed !",
              }
            }
      security:
        - bearerAuth: []
  /admin/quote/{quoteId}:
    put:
      tags:
        - "quote"
      summary: "Update an existing quote"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: quoteId
          type: string
          required: true
          description: Id of a quote 
        - in: formData
          name: name
          description: name of customer.
          type: string 
        - in: formData
          name: description
          description: description of customer.
          type: string 
        - in: formData
          name: quote
          description: detail of quote.
          type: string 
        - in: formData
          name: avatar
          description: avatar of quote.
          type: file  
      responses:
        200:
          description: Update quote successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update quote successfully.",
              "data": {
                "name": "string",
                "description": "string", 
                "quote": "string",
                "avatar": "path",        
              }
            }        
        400:
          description: Create quote failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Quote does not exist.",
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - "quote"
      summary: "Delete a existing quote"
      produces:
        - application/json
      parameters:
        - in: path
          name: quoteId
          type: string
          required: true
          description: Id of a quote 
      responses:
        200:
          description: Delete quote successfully.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Delete quote successfully.",
            }
        400:
          description: Delete quote failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Quote does not exist.",
            }
      security:
        - bearerAuth: []
  /order:
    post:
      tags:
        - "order"
      summary: "Customer create a new order"
      consumes:
        - application/json
      parameters:
        - in: body
          name: order
          description: new order information. service is delivery service's name.
          schema:
            type: object
            properties:              
              sender:
                type: object
                properties:
                  name:
                    type: string
                  phone:
                    type: string
                  address:
                    type: string
              receiver: 
                type: object
                properties:
                  name:
                    type: string
                  phone:
                    type: string
                  address:
                    type: string
              shipping:
                type: object
                properties:
                  insurance_fees:
                    type: string
                    enum: ['collected', 'waiting', 'paid']
                  note:
                    type:  string
                  total_fee:
                    type:  string
                  pick_up_time:
                    type: string
              product:
                type: object
                properties:
                  name:
                    type: string
                  quantity:
                    type:  string
                  types:
                    type:  string
                  goods_value:
                    type: string
                  weight:
                    type: string
                  other:
                    type:  string
                  note:
                    type:  string
                  service:
                    type: string                           
      responses:
        200:
          description: Create new order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create new order successfully.",
              "data": {
                "orderId": "string",
              }
            }
        400:
          description: Create order failed.
          schema:
            type: object
            example: {
             
            }
      security:
        - bearerAuth: []
    
  /order/{orderId}:    
    get: 
      tags:
        - "order"
      summary: Customer get information of an order
      produces:
        - application/json     
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: Id of a order 
      responses:
        200:
          description: get order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get order successfully.",
              "data": {
                
              }
            }          
        400:
          description: The order ${orderId} does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "The order ${orderId} does not exist.",
            }
      security:
        - bearerAuth: []
    put: 
      tags:
        - "order"
      summary: Customer update information of an waiting order
      produces:
        - application/json     
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: Id of a order 
        - in: body
          name: order
          description: new order information. service is delivery service's name.
          schema:
            type: object
            properties:              
              sender:
                type: object
                properties:
                  name:
                    type: string
                  phone:
                    type: string
                  address:
                    type: string
              receiver: 
                type: object
                properties:
                  name:
                    type: string
                  phone:
                    type: string
                  address:
                    type: string
              shipping:
                type: object
                properties:
                  insurance_fees:
                    type: string
                    enum: ['collected', 'waiting', 'paid']
                  note:
                    type:  string
                  total_fee:
                    type:  string
                  pick_up_time:
                    type: string
              product:
                type: object
                properties:
                  name:
                    type: string
                  quantity:
                    type:  string
                  types:
                    type:  string
                  goods_value:
                    type: string
                  weight:
                    type: string
                  other:
                    type:  string
                  note:
                    type:  string
                  service:
                    type: string   
      responses:
        200:
          description: Update the order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update the order successfully.",
              "data": {
                "_id": "6323e46331bbe8e3bb11ffc5",
                "orderId": "60772673",
                "service": {},
                "customer": {},
                "sender": {},
                "receiver": {},
                "origin": {},
                "destination": {},
                "status": "completed",
                "feedback": [],
                "createdAt": "2022-09-16T02:50:11.347Z",
                "updatedAt": "2022-09-20T03:40:49.920Z",
                "__v": 0,
                "products": []
              }
            }  
        400:
          description: The order ${orderId} does not exist.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "The order ${orderId} does not exist.",
              },
              "error2": {
                "success": false,
                "message": "Can not edit this order because it is not in waiting process.",
              },
              "error3": {
                "success": false,
                "message": "Origin is not existing.",
              },
              "error4": {
                "success": false,
                "message": "Origin warehouse doesn't exist.",
              },
              "error5": {
                "success": false,
                "message": "Destination is not existing.",
              },
              "error6": {
                "success": false,
                "message": "Destination warehouse doesn't exist.",
              }
            }
      security:
        - bearerAuth: []
  /order/customer:
    get:
      tags:
        - "order"
      summary: "get all order of customer by date"
      consumes:
        - application/json
      parameters:
        - in: query
          name: keyword
          type: String
          description: receiver's name or receiver's phone or product's name or shipping's id
        - in: query
          name: status
          type: String
          description: status of order
        - in: query
          name: startDate
          type: Date  
          description: startDate
        - in: query
          name: endDate
          type: Date  
          description: endDate
      responses:
        200:
          description: Get order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get order successfully.",
              "data": [
                {      }
              ]
            }
        400:
          description: Information not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - bearerAuth: []  
  /order/finance/:startDate/:endDate:
    get:
      tags:
        - "order"
      summary: "get all order of customer by date to finance management"
      consumes:
        - application/json
      parameters:
        - in: path
          name: startDate
          type: Date
          required: true
          description: startDate
        - in: path
          name: endDate
          type: Date
          required: true
          description: endDate
      responses:
        200:
          description: Get list order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get list order successfully.",
              "data": [
               
              ]
            }
        400:
          description: Information not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - bearerAuth: []
  /order/feedlback/{orderId}:
    put:
      tags:
        - "order"
      summary: send Feedlback to staff or customer
      produces:
        - application/json
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: Id Of a order
        - in: body
          name: Content
          description: Create Feedlback 
          schema:
            type: object
            properties:
              content:
                type: string
      responses:
        200:
          description: create order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create Feeback successfully",
            }          
        400:
          description: The order ${orderId} does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "The order ${orderId} does not exist.",
            }
      security:
        - bearerAuth: []
  /order/{orderId}/feedback:
    get:
      tags:
        - "order"
      summary: get feedlback by Staff or customer order
      produces:
        - application/json
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: Id Of a order
      responses:
        200: 
          description: get feedback successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get feedback successfully",
              "data": {
                      "user": "string",
                      "content": "string",
                      "_id": "objectId",
                      },
            }
        400:
          description: the order does not exits or forbidden
          schema: 
            type: object
            example: {
              "success": false,
              "message": "The order does not exist or forbidden",
            }
      security:
        - bearerAuth: []
  /admin/order/tracking/scan/{orderId}:
     patch: 
      tags:
        - "order"
      summary: admin update tracking of an order by orderId
      produces:
        - application/json     
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: Id of a order 
        - in: body
          name: body
          required: true
          schema :
            type : object
            properties:
              scan_type : 
                type : string
                description: scan_type
                example: "string"
                enum: ['recived_order','sending_postoffice','incoming_postoffice','sending_warehouse','incoming_warehouse','shipping']
              transportation:
                type : string
                description: transportation
                example: "string ; only scan_type = recived_order not required"
                enum: ['truck', 'boat', 'plane' , 'motorbike']
              scan_code_time:
                type : string
                description: time to action
                example: "string"
              warehouse:
                type : string
                description: id of warehouse
                example: "string ; required when action in warehouse"
              driver:
                type : string
                description: id of driver
                example: "string ; required when action send/receive"
              shipper:
                type : string
                description: id of shipper
                example: "string ; required when scan_type = shipping"
      responses:
        200:
          description: admin update tracking of an order by orderId successfully.
          schema:
            type: object
            example: {
             
            }          
        400:
          description: The order ${orderId} does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "The order ${orderId} does not exist.",
            }
      security:
        - bearerAuth: []
  /admin/order:
    get:
      tags:
        - "order"
      summary: Admin get list of orders
      produces:
        - application/json      
      parameters:
        - in: query
          name: keyword
          type: String
          description: receiver's name or receiver's phone or product's name or shipping's id
        - in: query
          name: status
          type: String
          description: status of order
        - in: query
          name: startDate
          type: Date  
          description: startDate
        - in: query
          name: endDate
          type: Date  
          description: endDate
      responses:
        200:
          description: get list of orders successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get list of orders successfully.",
              "data": {
                "length": "number",
                "orders": [
                  
                ]
              }
            }
      security:
        - bearerAuth: []
  /admin/order/{orderId}:
    get: 
      tags:
        - "order"
      summary: Admin get information of an order
      produces:
        - application/json     
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: Id of a order 
      responses:
        200:
          description: get order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get order successfully.",
              "data": {
                
              }
            }          
        400:
          description: The order ${orderId} does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "The order ${orderId} does not exist.",
            }
      security:
        - bearerAuth: []
  /admin/order/status/{orderId}:
    put:
      tags:
        - "order"
      summary: Admin update order status
      produces:
        - application/json     
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: Id of a order 
        - in: body
          name: status
          description: update status (waiting, accepted, processing, completed, refused, cancel, pay, unpay)    
          type: string
          required: true
      responses:
        200:
          description: Change status of the order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Change status of the order successfully.",
              "data": {
              }
            }  
        400:    
          description: Can not change the status of this order.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Can not change the status of this order.",
            }    
        404:
          description: Order does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Order does not exist.",
            }
      security:
        - bearerAuth: []
  /admin/order/{customerId}:
    post:
      tags:
        - "order"
      summary: "Admin create a new order for a customer"
      consumes:
        - application/json
      parameters:
        - in: path
          name: customerId
          description: ID of a customer
          type: string
        - in: body
          name: order
          description: new order information. service is delivery service's name.
          schema:
            type: object
            properties:              
              sender:
                type: object
                properties:
                  name:
                    type: string
                  phone:
                    type: string
                  address:
                    type: string
              receiver: 
                type: object
                properties:
                  name:
                    type: string
                  phone:
                    type: string
                  address:
                    type: string
              cod:
                type: object
                properties:
                  status:
                    type: string
                    enum: ['collected', 'waiting', 'paid']
                  fee:
                    type:  string
                  cod:
                    type:  string
                  control_money:
                    type: string
              shipping:
                type: object
                properties:
                  insurance_fees:
                    type: string
                    enum: ['collected', 'waiting', 'paid']
                  note:
                    type:  string
                  total_fee:
                    type:  string
                  pick_up_time:
                    type: string
              product:
                type: object
                properties:
                  name:
                    type: string
                  quantity:
                    type:  string
                  types:
                    type:  string
                  goods_value:
                    type: string
                  weight:
                    type: string
                  other:
                    type:  string
                  note:
                    type:  string
                  service:
                    type: string                             
      responses:
        200:
          description: Create new order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create new order successfully.",
              "data": {
                "orderId": "string",
              }
            }
        400:
          description: Create order failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Delivery service is not available.",
              },
              "error2": {
                "success": false,
                "message": "Origin is not existing.",
              },
              "error3": {
                "success": false,
                "message": "Origin warehouse doesn't exist.",
              },
              "error4": {
                "success": false,
                "message": "Destination warehouse doesn't exist.",
              },
              "error5": {
                "success": false,
                "message": "Destination is not existing.",
              },
              "error6": {
                "success": false,
                "message": "Customer does not exist.",
              }
            }
      security:
        - bearerAuth: []

  /admin/order/profit/{Id}:
    get: 
      tags:
        - "order"
      summary: Get profit report of each order by Id
      produces:
        - application/json     
      parameters:
        - in: path
          name: Id
          type: string
          required: true
          description: Id of a order 
      responses:
        200:
          description: Get profit of order successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get profit of order successfully.",
              "data": {
                  "Id": "string",
                  "profit": "number",
              }
            }          
        400:
          description: The order has not been completed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "The order has not been completed.",
            }
      security:
        - bearerAuth: []
  /orderIssue/:orderId/return:
    put: 
      tags:
        - "orderIssues"
      summary: Customers return goods
      produces:
        - application/json     
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: orderId of a order 
        - in: body
          name: orderIssue
          description: orderIssue.
          schema:
            type: object      
            properties:
              description:
                type: string
                required: true
      responses:
        200:
          description: successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "successfully.",
              "data": {
                  "orderId": "string",
                  "issuesType": "string",
                  "description": "string",
              }
            }          
        400:
          description: This orderIssues is already existed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "This orderIssues is already existed.",
            }
        404:
          description: Order not found or status of order not processing.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Order not found or status of order not processing",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error ",
            }
      security:
        - bearerAuth: []   
  /admin/orderIssue/orderIssues:
    post: 
      tags:
        - "orderIssues"
      summary: Update Order Issue
      produces:
        - application/json     
      parameters:
        - in: body
          name: orderId
          type: string
          required: true
          description: orderId of a order 
        - in: body
          name: issueType
          type: string
          required: true
          description: Type issue return, lost, damage, prohibited, unreachable, customerRefused, returnToSender, appointment
        - in: body
          name: description
          type: string
          description: description issue of order
          schema:
            type: object      
            properties:
              description:
                type: string
                required: true
              productIds:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: objectId
      responses:
        200:
          description: successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "successfully.",
              "data": {
                  "orderId": "string",
                  "issuesType": "string",
                  "description": "string",
                  "productIds": [],
              }
            }          
        400:
          description: This orderIssues is already existed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "This orderIssues is already existed.",
            }
        404:
          description: Order not found or status of order not processing
          schema:
            type: object
            example: {
              "success": false,
              "message": "Order not found or status of order not processing",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error ",
            }
      security:
        - bearerAuth: []   
  /admin/orderIssue/:id:
    get:
      tags:
        - "orderIssues"
      summary: "Get orderIssues by id"
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          type: ObjectId
          required: true
          description: id of OrderIssues
      responses:
        200:
          description: Get orderIssue successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get orderIssue successfully.",
              "data": [
                {
                "issuesType": "string",
                "description": "string",
                "orderId": "string",
                "productIds": [],
                }
              ]
            }
        400:
          description: Information not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - bearerAuth: []
  /admin/orderIssue:
    get:
      tags:
        - "orderIssues"
      summary: "Get list orderIssues"
      consumes:
        - application/json
      responses:
        200:
          description: Get orderIssue successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get orderIssue successfully.",
              "data": [
                {
                "issuesType": "string",
                "description": "string",
                "orderId": "string",
                "productIds": [],
                }
              ]
            }
        400:
          description: Information not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - bearerAuth: []
  orderIssue/orders/issuses:
    get:
      tags:
        - "orderIssues"
      summary: "Get orderIssue of customer"
      consumes:
        - application/json
      responses:
        200:
          description: Get orderIssue successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get orderIssue successfully.",
              "data": [
                {
                "issuesType": "string",
                "description": "string",
                "orderId": "string",
                "productIds": [],
                }
              ]
            }
        400:
          description: Information not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - bearerAuth: []
  /orderIssue/:
    get:
      tags:
        - "orderIssues"
      summary: "Get order return of customer"
      consumes:
        - application/json
      parameters:
        - in: path
          name: orderId
          type: string
          description: orderid of Order
        - in: path
          name: issueType
          type: string
          description: issueType of OrderIssue
      responses:
        200:
          description: Get orderIssue successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get orderIssue successfully.",
              "data": [
                {
                "issuesType": "string",
                "description": "string",
                "orderId": "string",
                "productIds": [],
                }
              ]
            }
        400:
          description: Information not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - bearerAuth: []   
  /orderIssue/orderId/:orderId:
    get:
      tags:
        - "orderIssues"
      summary: "Get orderIssues by orderid"
      consumes:
        - application/json
      parameters:
        - in: path
          name: orderid
          type: string
          required: true
          description: orderid of Order
      responses:
        200:
          description: Get orderIssue successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get orderIssue successfully.",
              "data": [
                {
                "issuesType": "string",
                "description": "string",
                "orderId": "string",
                "productIds": [],
                }
              ]
            }
        400:
          description: Information not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Information not found.",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - bearerAuth: []
  /order/COD/{startDate}/{endDate}:
    get:
      tags:
        - order
      summary: get cod order information
      consumes:
        - application/json
      parameters:
        - in: path
          name: startDate
          type: string
          required: true
          description: startDate
        - in: path
          name: endDate
          type: string
          required: true
          description: endDate
      responses:
        200:
          description: get about information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get cod information successfully.",
              "data": {},
            }
        400:
          description: cod information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "cod information is not found.",
            }
      security:
        - bearerAuth: []
  /order/endCOD/{startDate}/{endDate}:
    get:
      tags:
        - order
      summary: get cod order information
      consumes:
        - application/json
      parameters:
        - in: path
          name: startDate
          type: string
          required: true
          description: startDate
        - in: path
          name: endDate
          type: string
          required: true
          description: endDate
      responses:
        200:
          description: get about information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get cod information successfully.",
              "data": {},
            }
        400:
          description: cod information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "cod information is not found.",
            }
      security:
        - bearerAuth: []
  /product/{orderId}:
    post:
      tags:
        - "product"
      summary: "Customer add a new product to order"
      consumes:
        - application/json
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: Id of order
        - in: body
          name: products
          description: array of products.
          schema:
            type: object      
            properties:
              products:
                type: array
                items:
                  type: object    
                  properties:              
                    name: 
                      type: string
                    quantity:
                      type: integer
                    unit: 
                      type: string   
                      enum: ['m3', 'kg', 'ton']
      responses:
        200:
          description: Add product(s) successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Add product to order successfully.",
              "data": [
                {
                "name": "string",
                "quantity": "number",
                "unit": "string",
                }
              ]
            }
        400:
          description: Add product(s) failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Order is not found.",
              }
              "error2": {
                "success": false,
                "message": "Orders can't add more products.",
              }
              "error3": {
                "success": false,
                "message": "quantity not valiable.",
              }
              "error4": {
                "success": false,
                "message": "Unit Not valiable.",
              }
            }
      security:
        - bearerAuth: []
    get:
      tags:
        - "product"
      summary: "Customer get product of an order"
      consumes:
        - application/json
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: Id of order         
      responses:
        200:
          description: Get product successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get products successfully.",
              "data": [
                {
                "name": "string",
                "quantity": "number",
                "unit": "string",
                "order": "string",
                "product_shipments": [],
                }
              ]          
            }
        400:
          description: Get product failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Order is not found.",
            }
      security:
        - bearerAuth: []
  /product/{productId}:
    put:
      tags:
        - "product"
      summary: "Customer update product in waiting order"
      consumes:
        - application/json
      parameters:
        - in: path
          name: productId
          type: string
          required: true
          description: productId
        - in: body
          name: product
          description: updated product
          schema:
            type: object      
            properties:
              name: 
                type: string
              quantity:
                type: integer
              unit: 
                type: string   
                enum: ['m3', 'kg', 'ton']            
      responses:
        200:
          description: Update product successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update product successfully.",
            }
        400:
          description: Update product failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Product does not exist.",
              }
              "error2": {
                "success": false,
                "message": "Order for this product is not found.",
              }
              "error3": {
                "success": false,
                "message": "Product can't be changed.",
              }
              "error4": {
                "success": false,
                "message": "quantity not valiable.",
              }
              "error5": {
                "success": false,
                "message": "Unit Not valiable.",
              }
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - "product"
      summary: "Customer delete product in waiting order"
      consumes:
        - application/json
      parameters:
        - in: path
          name: productId
          type: string
          required: true
          description: productId                      
      responses:
        200:
          description: Delete product successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete product successfully.",
            }
        400:
          description: Delete product failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Product does not exist.",
              }
              "error2": {
                "success": false,
                "message": "Order for this product is not found.",
              }
              "error3": {
                "success": false,
                "message": "Product can't be changed.",
              }
            }
      security:
        - bearerAuth: []
  /admin/product:
    get:
      tags:
        - "product"
      summary: "Admin get list of products"
      consumes:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of product on a page
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: keyword
          type: string
          description: keyword
        - in: query
          name: sortBy
          type: string
          description: sort by (name, quantity, updatedAt)
        - in: query
          name: orderId
          type: string
          description:  orderId
      responses:
        200:
          description: Get product successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get product successfully.",
              "data": [
                {
                "name": "string",
                "quantity": "number",
                "unit": "string",
                "order": "string",
                "product_shipments": [],                  
                }
              ],          
            }
        400:
          description: Get product failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Order is not found.",
            }
      security:
        - bearerAuth: []
  /admin/product/{orderId}:
    post:
      tags:
        - "product"
      summary: "Admin add a new product to order"
      consumes:
        - application/json
      parameters:
        - in: path
          name: orderId
          type: string
          required: true
          description: orderId of order
        - in: body
          name: products
          description: array of products.
          schema:
            type: object      
            properties:
              products:
                type: array
                items:
                  type: object    
                  properties:              
                    name: 
                      type: string
                    quantity:
                      type: integer
                    unit: 
                      type: string   
                      enum: ['m3', 'kg', 'ton']
      
      responses:
        200:
          description: Add product(s) successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Add product to order successfully.",
              "data": [
                {
                "name": "string",
                "quantity": "number",
                "unit": "string",
                }
              ]
            }
        400:
          description: Add product(s) failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Order is not found.",
              }
              "error2": {
                "success": false,
                "message": "Orders can't add more products.",
              }
              "error3": {
                "success": false,
                "message": "quantity not valiable.",
              }
              "error4": {
                "success": false,
                "message": "Unit Not valiable.",
              }
            }
      security:
        - bearerAuth: []
  /admin/product/{productId}:
    get:
      tags:
        - "product"
      summary: "Admin get a product"
      consumes:
        - application/json
      parameters:
        - in: path
          name: productId
          type: string
          description:  productId
      responses:
        200:
          description: Get product information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get product successfully.",
              "data":
                {
                "name": "string",
                "quantity": "number",
                "unit": "string",
                "order": "string",
                "product_shipments": [],                  
                }
            }
        400:
          description: Get product failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Product is not found.",
            }
      security:
        - bearerAuth: []
    put:
      tags:
        - "product"
      summary: "Admin update product in waiting order"
      consumes:
        - application/json
      parameters:
        - in: path
          name: productId
          type: string
          required: true
          description: productId
        - in: body
          name: product
          description: updated product
          schema:
            type: object      
            properties:
              name: 
                type: string
              quantity:
                type: integer
              unit: 
                type: string   
                enum: ['m3', 'kg', 'ton']            
      responses:
        200:
          description: Update product successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update product successfully.",
            }
        400:
          description: Update product failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Product does not exist.",
              }
              "error2": {
                "success": false,
                "message": "Order for this product is not found.",
              }
              "error3": {
                "success": false,
                "message": "Product can't be changed.",
              }
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - "product"
      summary: "Admin delete product in waiting order"
      consumes:
        - application/json
      parameters:
        - in: path
          name: productId
          type: string
          required: true
          description: productId                      
      responses:
        200:
          description: Delete product successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete product successfully.",
            }
        400:
          description: Delete product failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Product does not exist.",
              }
              "error2": {
                "success": false,
                "message": "Order for this product is not found.",
              }
              "error3": {
                "success": false,
                "message": "Product can't be changed.",
              }
            }
      security:
        - bearerAuth: []
  /admin/product/{productId}/movement:
    get:
      tags:
        - "product"
      summary: "Admin get movement information of product"
      consumes:
        - application/json
      parameters:
        - in: path
          name: productId
          type: string
          description:  productId
      responses:
        200:
          description: Get product movement successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get product movement information successfully.",
              "data": [
                {
                "origin": "string",
                "destination": "string",
                "shipments": [],                  
                }
              ],          
            }
        400:
          description: Get product movement failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Product does not exist",
            }
      security:
        - bearerAuth: []
  /career:
    get:
      tags:
        - "career"
      summary: get career information  
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of careers on a page
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: keyword
          type: string
          description: keyword
        - in: query
          name: sortBy
          type: string
          description: sort by
        - in: query
          name: department
          type: string
          description:  department
        - in: query
          name: type
          type: string
          description: type
        - in: query
          name: location
          type: string
          description:  location
        - in: query
          name: state
          type: string
          description: state
      responses:
        200:
          description: get career information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get career information successfully.",
              "data": {
                "length": "number",
                "career": [
                  {    
                  "name": "string",
                  "type": "string",
                  "description": "string",
                  "location": "string",
                  "state": "string",
                  "bonus": "string",
                  "deadline": "YYYY/MM/DD",
                  "applicants": [],
                  }                
                ]
              }
            }
        400:
          description: career information is not found.    
          schema:
            type: object
            example: {
              "success": true,
              "message": "Career information is not found.",
            }    
  /career/{careerId}:
    get:
      tags:
        - "career"
      summary: get career by id
      produces:
        - application/json
      parameters:
        - in: path
          name: careerId
          type: string
          required: true
          description: Id of a career
      responses:
        200:
          description: get career information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get career information successfully.",
              "data": {
                "name": "string",
                "type": "string",
                "description": "string",
                "location": "string",
                "state": "string",
                "bonus": "string",
                "deadline": "YYYY/MM/DD",
                "applicants": [],              
              }
            }
        400:
          description: Career does not exist.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Career does not exist.",
            }         
  /career/careers/type:
    get:
      tags:
        - "career"
      summary: get career by type  
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of careers on a page
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: keyword
          type: string
          description: keyword
        - in: query
          name: name
          type: string
          description: name
        - in: query
          name: sortBy
          type: string
          description: sort by
        - in: query
          name: department
          type: string
          description:  department
        - in: query
          name: type
          type: string
          description: type
        - in: query
          name: location
          type: string
          description:  location
        - in: query
          name: state
          type: string
          description: state
      responses:
        200:
          description: get career information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get career information successfully.",
              "data": {
                "length": "number",
                "career": [
                  {  
                  "type": "string",
                  }                
                ]
              }
            }
        400:
          description: career information is not found.    
          schema:
            type: object
            example: {
              "success": true,
              "message": "Career information is not found.",
            }
  /career/careers/location/:
    get:
      tags:
        - "career"
      summary: get career by location  
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of careers on a page
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: keyword
          type: string
          description: keyword
        - in: query
          name: sortBy
          type: string
          description: sort by
        - in: query
          name: name
          type: string
          description: Name
        - in: query
          name: department
          type: string
          description:  department
        - in: query
          name: type
          type: string
          description: type
        - in: query
          name: location
          type: string
          description:  location
        - in: query
          name: state
          type: string
          description: state
      responses:
        200:
          description: get career information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get career information successfully.",
              "data": {
                "length": "number",
                "career": [
                  {  
                  "location": "string",
                  }                
                ]
              }
            }
        400:
          description: career information is not found.    
          schema:
            type: object
            example: {
              "success": true,
              "message": "Career information is not found.",
            } 
  /admin/career/create:
    post:
        tags:
          - "career"
        summary: "Create new career and add career to department"
        parameters:
          - in: body
            name: career
            description: a new career.
            schema:
              type: object
              required: true
              properties:
                departmentId:
                  type: string
                name:
                  type: string
                type:
                  type: string
                description:
                  type: string
                location:
                  type: string
                state:
                  type: string
                bonus:
                  type: string
                deadline:
                  type: string
                  format: date
        responses:
          200:
            description: Create new career successfully.
            schema:
              type: object
              example: {
                "success": true,
                "message": "Create new career successfully.",
              }
          400:
            description: Update career fail.
            schema:
              type: object
              example: {
                "success": false,
                "message": "Update career fail.",
              }
        security:
          - bearerAuth: []
  /admin/career/{careerId}:
    put:
      tags:
        - "career"
      summary: admin update career
      produces:
        - application/json        
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - in: path
          name: careerId
          type: string
          required: true
          description: Id of a career
        - in: body
          name: career
          description: a new career.
          schema:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
              description:
                type: string
              location:
                type: string
              state:
                type: string
              bonus:
                type: string
              deadline:
                type: string
                format: date
      responses:
        200:
          description: Update career successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update career successfully.",
            }
        400:
          description: career cannot be found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Career does not exist.",
            }
      security:
        - bearerAuth: []                          
    delete:
      tags:
        - "career"
      summary: "Delete an existing career"
      produces:
        - application/json
      parameters:
        - in: path
          name: careerId
          type: string
          required: true
          description: Id of an career 
      responses:
        200:
          description: Delete career successfully.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Delete career successfully.",
            }
        400:
          description: Delete career failed.      
          schema:
            type: object
            example: {
              "success": false,
              "message": "Career does not exist.",
            }
      security:
        - bearerAuth: []    
  /carriageContract:
    get:
      tags: 
        - "carriageContract"
      summary: "Get list of carriagecontract"
      productes:
        - application/json
      parameters:
        - in: query
          name: car_maintenance
          type: string
          description: car_maintenance
        - in: query
          name: leases
          type: string
          description: leases
      responses:
        200:
          description: get distance information successfully.
          schema:
            type: object
            example: {
                  "car_maintenance": "string",
                  "type-fee": "number",
                  "leases":  "number",
            }
        400:
          description: distance information is not found.  
      security:
        - bearerAuth: []
  /carriageContract/{_Id}:
    get:
      tags: 
        - "carriageContract"
      summary: "Get list carriagecontract By Id"
      productes:
        - application/json
      parameters:
        - in: path
          name: _Id
          type: string
          description: _Id
      responses:
        200:
          description: get distance information successfully.
          schema:
            type: object
            example: {
                  "car_maintenance": "string",
                  "type-fee": "number",
                  "leases":  "number",
            }
        400:
          description: distance information is not found.  
      security:
        - bearerAuth: []

  /admin/carriageContract/:
    get:
      tags:
        - "carriageContract" 
      summary: "Get Admin list carriageContract"
      productes:
        - application/json
      parameters:
        - in: query
          name: car_maintenance
          type: string
          description: car_maintenance
        - in: query
          name: leases
          type: string
          description: leases
      responses:
        200:
          description: get distance information successfully.
          schema:
            type: object
            example: {
                  "car_maintenance": "Date",
                  "type-fee": "Number",
                  "leases":  "String",
            }
        400:
          description: distance information is not found.
      security:
        - bearerAuth: []
  /admin/carriageContract/create:
    post:
      tags: 
        - "carriageContract"
      summary: "Post Admin of carriageContract"
      consumes:
        - application/json
      parameters:
        - in: body
          name: CarriageContract"
          schema:
            type: "object"
            required: true
            properties:
              car_maintenance: 
                type: Date
              type-fee: 
                type: Number
              leases: 
                type: String   
      responses:
        200:
          description: get distance information successfully.
          schema:
            type: object
            example: {
                  "car_maintenance": "String",
                  "type-fee": "Number",
                  "leases":  "String",
            }
        404:
          description: receiver's ID didn't exist.
      security:
        - bearerAuth: []
  /admin/carriageContract/{_id}:
    put:
      tags: 
        - "carriageContract"
      summary: "Put Admin list of carriageContract"
      consumes:
        - application/json
      productes:
        - application/json
      parameters:
        - in: path
          name: _id
          type: string
          required: true
          description: Id of a department
        - in: body
          name: movingcontract"
          schema:
            type: "object"
            required: true
            properties:
              car_maintenance: 
                type: String
              type-fee: 
                type: Number
              leases:  
                type: String
      responses:
        200:
          description: get distance information successfully.
          schema:
            type: object
            example: {
                  "car_maintenance": "string",
                  "type-fee": "Number",
                  "leases":  "String",
            }
        400:
          description: distance information is not found.  
      security:
        - bearerAuth: []
  /admin/carriageContract/delete/{_id}:
    delete:
      tags: 
        - "carriageContract"
      summary: "Delete Admin list of carriageContract"
      productes:
        - application/json
      parameters:
        - in: path
          name: _id
          type: string
          required: true
          description: Id of a department      
      responses:
        200:
          description: get distance information successfully.
          schema:
            type: object
            example: {
                  "car_maintenance": "String",
                  "type-fee": "Number",
                  "leases":  "String",
            }
        400:
          description: distance information is not found.  
      security:
        - bearerAuth: []
          description: Delete feature failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Feature does not exist.",
            }
  /department:
    get:
      tags:
        - "department"
      summary: get department information
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of careers on a page
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: keyword
          type: string
          description: keyword
        - in: query
          name: sortBy
          type: string
          description: sort by
      responses:
        200:
          description: get department information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get department information successfully.",
              "data": {
                "length": "number",
                "department": [
                  {
                    "_id": "id",
                    "name": "string",
                    "description": "string",
                    "location": "string",
                    "director": "string",
                    "scale": 0,
                    "careers": []
                  }
                ]
              }
            }
        400:
          description: department information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Department information is not found.",
            }
  /department/{departmentId}:
    get:
      tags:
        - "department"
      summary: get department by id
      produces:
        - application/json
      parameters:
        - in: path
          name: departmentId
          type: string
          required: true
          description: Id of a department
      responses:
        200:
          description: get department successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get department information successfully.",
              "data": {
                "_id": "id",
                "name": "string",
                "description": "string",
                "location": "string",
                "director": "string",
                "scale": 0,
                "careers": [],
              }
            }
        400:
          description: departmentId is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Department information is not found.",
            }
  /admin/department:
    post:
      tags:
        - "department"
      summary: "Create a new department"
      parameters:
        - in: body
          name: department
          schema:
            type: object
            required: true
            properties:
              name:
                type: string
              description:
                type: string
              location:
                type: string
              director:
                type: string
              scale:
                type: number
      responses:
        200:
          description: Department registered successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Department registered successfully.",
            }
        400:
          description: Create department failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "The director staff does not exist.",
            }
      security:
        - bearerAuth: [] 
  /admin/department/{departmentId}:
    put:
      tags:
        - "department"
      summary: admin update department
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - in: path
          name: departmentId
          type: string
          required: true
          description: Id of a department
        - in: body
          name: department
          schema:
            type: object
            required: true
            properties:
              name:
                type: string
              description:
                type: string
              location:
                type: string
              director:
                type: string
              scale:
                type: number
      responses:
        200:
          description: Update department successfully.
          schema:
            type: object
            example: {
                "success": true,
                "message": "Update department successfully.",
                "data": {
                  "name": "string",
                  "description": "string",
                  "location": "string",
                  "director": "string",
                  "scale": 0,
                }
            }
        400:
          description: Update department failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "The director staff does not exist.",
              }
              "error2": {
                "success": false,
                "message": "Department does not exist.",
              }
            }
      security:
        - bearerAuth: [] 
    delete:
      tags:
        - "department"
      summary: "Delete an existing department"
      produces:
        - application/json
      parameters:
        - in: path
          name: departmentId
          type: string
          required: true
          description: Id of a department
      responses:
        200:
          description: Delete department successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete department successfully.",
            }
        400:
          description: Delete department failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Department does not exist.",
            }
      security:
        - bearerAuth: [] 
  /feature:
    get:
      tags:
        - "feature"
      summary: get feature information
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of features on a page
          parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: keyword
          type: string
          description: search by keyword
        - in: query
          name: name
          type: string
          description: filter by name
        - in: query
          name: detail
          type: string
          description: filter by detail 
        - in: query
          name: sortBy
          type: string
          description: sort in order (name, -updatedAt)
      responses:
        200:
          description: Get feature information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get feature information successfully.",
              "data": {
                "length": "number",
                "feature": [
                  {
                  "name": "string",
                  "logo": "path",
                  "detail": "string",
                  }
                ]
              }
            }
        400:
          description: Feature information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Feature information is not found.",
            }
  /feature/{featureId}:
    get:
      tags:
        - "feature"
      summary: get feature by id
      produces:
        - application/json
      parameters:
        - in: path
          name: featureId
          type: string
          required: true
          description: Id of a feature 
      responses:
        200:
          description: Get feature information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get feature information successfully.",
              "data": {
                "name": "string",
                "logo": "path",
                "detail": "string",              
              }
            }
        400:
          description: Feature does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Feature does not exist.",
            }
  /feature/service/{serviceId}:
    get:
      tags:
        - "feature"
      summary: get features by service id
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of features on a page
          parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
      responses:
        200:
          description: Get feature information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get feature information successfully.",
              "data": {
                "length": "number",
                "feature": [
                  {
                  "name": "string",
                  "logo": "path",
                  "detail": "string",
                  }
                ]
              }
            }
        400:
          description: Feature information is not found.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Service does not exist.",
              }
              "error2": {
                "success": false,
                "message": "Feature information is not found.",
              }
            }
  /admin/feature/{serviceId}:
    post:
      tags:
        - "feature"
      summary: "Create a new feature"
      produces:
        - multipart/form-data
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: service id to add feature in
        - in: formData
          name: name
          type: string
          description: name for feature.
          required: true
        - in: formData
          name: detail
          type: string
          description: detail for feature.
          required: true    
        - in: formData
          name: logo
          type: file
          description: a logo for feature.
          required: true
      requestBody:
        content: 
           multipart/form-data:
            schema:            
              type: object
              properties:      
                name:           
                  type: string
                detail:   
                  type: string
                logo: 
                  type: string
                  format: base64
      responses:
        200:
          description: Create new feature successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create new feature successfully.",
            }
        400:
          description: Create feature failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create new feature fail.",
            }
      security:
        - bearerAuth: []
  /admin/feature/{featureId}:
    put:
      tags:
        - "feature"
      summary: "Update a existing feature"
      produces:
        - multipart/form-data
      parameters:
        - in: path
          name: featureId
          type: string
          required: true
          description: feature id
        - in: formData
          name: name
          type: string
          description: name for feature.
        - in: formData
          name: detail
          type: string
          description: detail for feature.
        - in: formData
          name: logo
          type: file
          description: a logo for feature.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                logo:
                  type: string
                  format: base64 
                detail:
                  type: string
      responses:
        200:
          description: Update feature successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update feature successfully.",
              "data": {
                "name": "string",
                "logo": "path",
                "detail": "string",
              }
            }
        400:
          description: Update feature failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Feature does not exist.",
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - "feature"
      summary: "Delete a existing feature"
      produces:
        - application/json
      parameters:
        - in: path
          name: featureId
          type: string
          required: true
          description: Id of a feature 
      responses:
        200:
          description: Delete feature successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete feature successfully.",
              "data": {
                "name": "string",
                "logo": "path",
                "detail": "string",
              }
            }
        400:
          description: Delete feature failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Feature does not exist.",
            }
      security:
        - bearerAuth: []

  /notification:
    get:
      tags:
        - notification
      summary: Get list of notifications
      produces:
        - application/json
      parameters:
        - in: query
          name: limit
          type: string
          description: limitation of notifications in response
      responses:
        200:
          description: Request successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Request successfully.",
            }
      security:
        - bearerAuth: []
    post:
      tags:
        - notification
      summary: Send a notification to another
      consumes:
        - application/json
      parameters:
        - in: body
          name: content
          schema:
            type: object
            properties:
              receiverId:
                type: string
              title:
                type: string
              message:
                type: string
              link:
                type: string
      responses:
        200:
          description: send the notification successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Send the notification successfully.",
            }
        401:
          description: receiver's ID didn't exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Receiver's ID didn't exist.",
            }
      security:
        - bearerAuth: []
  /admin/orderNotification/issue/:orderId:
    post:
      tags:
      - "orderNotification"
      summary: "Update order issues and send a notification to customer order"
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: issues
        required: true
        schema:
          type: object
          properties:
            issueType:
              type: string
      responses:
        200:
          description: Order issue updated successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Order issue updated successfully.",
            }  
        404:
          description: Order not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Order not found.",
            }
      security:
        - bearerAuth: []
  /detail-issues/:notificationId:
    get:
      tags:
      - "orderNotification"
      summary: "Get detail order issue."
      produces:
        - application/json
      parameters:
        - in: query
          name: notificationId
          type: string
          description: id of the orderNotification.
      responses:
        200:
          description: Request successful.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get detail order issue successfully.",
              "data":{
                "orderId": "string",
                "issuesType": "string",
                "description": "string",
                "productIds": [],
                }
              }
      security:
        - bearerAuth: []
  /orderNotification/:
    get:
      tags:
      - "orderNotification"
      summary: "Get all order notifications and filter notifications by date and issue."
      produces:
        - application/json
      parameters:
        - in: query
          name: fromDate
          type: string
          description: from date
        - in: query
          name: toDate
          type: string
          description: to date
      responses:
        200:
          description: Request successful
          schema:
            type: object
            example: {
              "success": false,
              "message": "Get all order notifications and filter notifications by date and issue successfully.",
              "data":{
                "_id": "string",
                "sender": "string",
                "receiver": "string",
                "title": "string",
                "message": "string",
                "link": "string",
                "createdAt": "date-time",
                "updatedAt": "date-time",
                }   
              }
      security:
        - bearerAuth: []
  /admin/orderNotification/issue/:orderId:
    post:
      tags:
      - "orderNotification"
      summary: "Update order issues and send a notification to customer order"
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: issues
        required: true
        schema:
          type: object
          properties:
            issueType:
              type: string
      responses:
        200:
          description: Order issue updated successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Order issue updated successfully.",
            }  
        404:
          description: Order not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Order not found.",
            }
      security:
        - bearerAuth: []
  /detail-issues/:notificationId:
    get:
      tags:
      - "orderNotification"
      summary: "Get detail order issue."
      produces:
        - application/json
      parameters:
        - in: query
          name: notificationId
          type: string
          description: id of the orderNotification.
      responses:
        200:
          description: Request successful.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get detail order issue successfully.",
              "data":{
                "orderId": "string",
                "issuesType": "string",
                "description": "string",
                "productIds": [],
                }
              }
      security:
        - bearerAuth: []
  /orderNotification/:
    get:
      tags:
      - "orderNotification"
      summary: "Get all order notifications and filter notifications by date and issue."
      produces:
        - application/json
      parameters:
        - in: query
          name: fromDate
          type: string
          description: from date
        - in: query
          name: toDate
          type: string
          description: to date
      responses:
        200:
          description: Request successful
          schema:
            type: object
            example: {
              "success": false,
              "message": "Get all order notifications and filter notifications by date and issue successfully.",
              "data":{
                "_id": "string",
                "sender": "string",
                "receiver": "string",
                "title": "string",
                "message": "string",
                "link": "string",
                "createdAt": "date-time",
                "updatedAt": "date-time",
                }   
              }
      security:
        - bearerAuth: []
  /distance:
    get:
      tags:
        - "distance"
      summary: get distance information
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of distances on a page
          parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: sortBy
          type: string
          description: sort in order
        - in: query
          name: fromProvince
          type: string
          description: Origin province
          required: true
        - in: query
          name: toProvince
          type: string
          description: Destination province
          required: true
      responses:
        200:
          description: get distance information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get distance information successfully.",
              "data": {
                "length": "number",
                "distance": [
                  {
                  "fromProvince": "string",
                  "toProvince": "string",
                  "zonecode": "string",
                  "distance":  "number",
                  }
                ]
              }
                    
            }
        400:
          description: Dsistance information is not found.  
          schema:
            type: object
            example: {
              "success": false,
              "message": "Distance information is not found.",
            }
  /distance/{distanceId}:
    get:
      tags:
        - "distance"
      summary: get distance by id
      produces:
        - application/json
      parameters:
        - in: path
          name: distanceId
          type: string
          required: true
          description: Id of a distance 
      responses:
        200:
          description: get distance successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get distance information successfully.",
              "data": {
                "fromProvince": "string",
                "toProvince": "string",
                "zonecode": "string",
                "distance":  "number",  
              }
            }
        400:
          description: Distance information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Distance information is not found.",
            }
    put:
      tags:
        - "distance"
      summary: "Update an existing distance zonecode"
      consumes:
        - application/json
      parameters:
        - in: path
          name: distanceId
          schema: 
            type: string
          required: true
          description: distance id
        - in: body
          name: distance
          description: an existing distance.
          schema:
            type: object
            required:
              - zonecode
            properties:              
              zonecode:
                type: string
      responses:
        200:
          description: Update distance successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update distance successfully.",
              "data": {
                "zonecode": "string", 
              }
            }
        400:
          description: Update distance failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Distance does not exist.",
            }
      security:
        - bearerAuth: []
  /distance/service/{serviceId}:
    get:
      tags:
        - "distance"
      summary: get distances by service id
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of distances on a page
          parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
        - in: query
          name: sortBy
          type: string
          description: sort in order
        - in: query
          name: fromProvince
          type: string
          description: Origin province
        - in: query
          name: toProvince
          type: string
          description: Destination province
      responses:
        200:
          description: get distance successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get distance information successfully.",
              "data": {
                "length": "number",
                "distance": [
                  {
                    "fromProvince": "string",
                    "toProvince": "string",
                    "zonecode": "string",
                    "distance":  "number",     
                  }
                ]
              }
     
            }
        400:
          description: Distance information is not found.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Service does not exist.",
              }
              "error2": {
                "success": false,
                "message": "Distance information is not found.",
              }
            }
  /admin/distance/create/{serviceId}:
    post:
      tags:
        - "distance"
      summary: "Create a new distance"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: path
          name: serviceId
          schema: 
            type: string
          required: true
          description: service id to add distance in
        - in: body
          name: distance
          description: a new distance.
          schema:
            type: object
            required:
              - fromProvince
              - toProvince
              - zonecode
              - dist
            properties:
              fromProvince:
                type: string
              toProvince:
                type: string
              zonecode:
                type: string
              dist:
                type: number
      responses:
        200:
          description: Create distance successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create distance successfully.",
            }
        400:
          description: Create distance failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Distance already exists.",
            }
      security:
        - bearerAuth: []
  /admin/distance/{distanceId}:
    put:
      tags:
        - "distance"
      summary: "Update an existing distance"
      consumes:
        - application/json
      parameters:
        - in: path
          name: distanceId
          schema: 
            type: string
          required: true
          description: distance id
        - in: body
          name: distance
          description: an existing distance.
          schema:
            type: object
            required:
              - fromProvince
              - toProvince
              - zonecode
              - dist
            properties:
              fromProvince:
                type: string
              toProvince:
                type: string
              zonecode:
                type: string
              dist:
                type: number
      responses:
        200:
          description: Update distance successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update distance successfully.",
              "data": {
                "fromProvince": "string",
                "toProvince": "string",
                "zonecode": "string",
                "distance":  "number",
              }
            }
        400:
          description: Update distance failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Distance does not exist.",
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - "distance"
      summary: "Delete an existing distance"
      produces:
        - application/json
      parameters:
        - in: path
          name: distanceId
          type: string
          required: true
          description: Id of a distance 
      responses:
        200:
          description: Delete distance successfully.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Delete distance successfully.",
              "data": {
                "fromProvince": "string",
                "toProvince": "string",
                "zonecode": "string",
                "distance":  "number",
              }
            }
        400:
          description: Delete distance failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Distance does not exist.",
            }
      security:
        - bearerAuth: []
  /price/{priceId}:
    get:
      tags:
        - "price"
      summary: get price by id
      produces:
        - application/json
      parameters:
        - in: path
          name: priceId
          type: string
          required: true
          description: Id of a price 
      responses:
        200:
          description: get price successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get price information successfully.",
              "data": {
                "uKG": "string",
                "uM3": "string",
                "uTON": "string",        
              }
            }
        400:
          description: price is not found.
          schema: 
            type: object
            example: {
              "success": false,
              "message": "Price information not found.",
            }
  /price/service/{serviceId}:
    get:
      tags:
        - "price"
      summary: get prices by service id
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of prices on a page
          parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
      responses:
        200:
          description: Get price information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get price information successfully.",
              "data": {
                "length": "number",
                "price": [
                  {
                  "uKG": "string",
                  "uM3": "string",
                  "uTON": "string",        
                  }
                ]
              }
            }
        400:
          description: price is not found.
          schema: 
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Service does not exist.",
              }
              "error2": {
                "success": false,
                "message": "Price information not found.",
              }
            }
  /admin/price/create/{serviceId}:
    post:
      tags:
        - "price"
      summary: "Create a new price"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: path
          name: serviceId
          schema: 
            type: string
          required: true
          description: service id to add price in
        - in: body
          name: price
          description: a new price.
          schema:
            type: object
            required:
              - kg
              - ton
              - m3
            properties:
              kg:
                type: array
                items:
                  type: object
                  required:
                    - next
                    - sidestep
                    - prices
                  properties:
                    next:
                      type: boolean
                    sidestep:
                      type: number
                    prices:
                      type: array
                      items:
                        type: number
                      example: [1, 2, 3, 4]
              ton:
                type: array
                items:
                  type: object
                  required:
                    - next
                    - sidestep
                    - prices
                  properties:
                    next:
                      type: boolean
                    sidestep:
                      type: number
                    prices:
                      type: array
                      items:
                        type: number
                      example: [1, 2, 3, 4]
              m3:
                type: array
                items:
                  type: object
                  required:
                    - next
                    - sidestep
                    - prices
                  properties:
                    next:
                      type: boolean
                    sidestep:
                      type: number
                    prices:
                      type: array
                      items:
                        type: number
                      example: [1, 2, 3, 4]
      responses:
        200:
          description: Create price table successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create price table successfully.",
            }
        400:
          description: Create price failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Request's body is incorrect.",
            }
      security:
        - bearerAuth: []
  /admin/price/{priceId}:
    put:
      tags:
        - "price"
      summary: "Update an existing price"
      consumes:
        - application/json
      parameters:
        - in: path
          name: priceId
          schema: 
            type: string
          required: true
          description: price id
        - in: body
          name: price
          description: a new price.
          schema:
            type: object
            required:
              - kg
              - ton
              - m3
            properties:
              kg:
                type: object
                required:
                  - next
                  - sidestep
                  - prices
                properties:
                  next:
                    type: string
                  sidestep:
                    type: number
                  prices:
                    type: array
                    items:
                      type: number
              ton:
                type: object
                required:
                  - next
                  - sidestep
                  - prices
                properties:
                  next:
                    type: string
                    description: "true"
                  sidestep:
                    type: number
                  prices:
                    type: array
                    items:
                      type: number
              m3:
                type: object
                required:
                  - next
                  - sidestep
                  - prices
                properties:
                  next:
                    type: string
                  sidestep:
                    type: number
                  prices:
                    type: array
                    items:
                      type: number
      responses:
        200:
          description: Update price successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update price successfully.",
              "data": {
                "uKG": "string",
                "uM3": "string",
                "uTON": "string", 
              }
            }
        400:
          description: Update price failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Price does not exist.",
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - "price"
      summary: "Delete an existing price"
      produces:
        - application/json
      parameters:
        - in: path
          name: priceId
          type: string
          required: true
          description: Id of a price 
      responses:
        200:
          description: Delete price successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete price successfully.",
              "data": {
                "uKG": "string",
                "uM3": "string",
                "uTON": "string", 
              }
            }
        400:
          description: Delete price failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Price does not exist.",
            }
      security:
        - bearerAuth: []
  /priceList:
    get:
      tags:
        - "priceList"
      summary: get priceList by province
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of priceLists on a page
          parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: province
          type: string
          required: true
          description: Province of a priceList 
      responses:
        200:
          description: Get pricelist information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get pricelist information successfully.",
              "data": {
                "length": "number",
                "files": [
                  {
                    "province": "string",
                    "file": "path",
                  }
                ]
              },
            }
        400:
          description: priceList is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Price list information is not found.",
            }
  /admin/priceList/{serviceId}:
    post:
      tags:
        - "priceList"
      summary: "Create a new priceList"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
        - in: formData
          name: province
          description: Province name to which the price files are associated.
          type: string
          required: true   
        - in: formData
          name: file
          description: file for priceList.
          type: file  
          required: true        
      requestBody:
        content: 
          multipart/form-data: 
            schema:            
              type: object
              properties:      
                province:           
                  type: string                
                file: 
                  type: string
                  format: base64                 
      responses:
        200:
          description: Create priceList successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "upload pricelist file successfully",
            }
        400:
          description: Create priceList failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "The pricelist's province is already used.",
              }
              "error2": {
                "success": false,
                "message": "Upload price list failed.",
              }
            }
      security:
        - bearerAuth: []
    put:
      tags:
        - "priceList"
      summary: "Modify a priceList"
      consumes:
        - multipart/form-data
      parameters:
        - in: query
          name: province
          type: string
          required: true
          description: Province of a priceList 
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
        - in: formData
          name: file
          description: New priceList file.
          type: file          
      requestBody:
        content: 
          multipart/form-data: 
            schema:            
              type: object
              properties:      
                file: 
                  type: string
                  format: base64
      responses:
        200:
          description: Update priceList successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update pricelist file successfully.",
            }
        400:
          description: Update priceList failed.
          schema: 
            type: object
            example: {
              "success": false,
              "message": "Service does not exist.",
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - "priceList"
      summary: "Delete an existing priceList"
      produces:
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service containing priceList
        - in: query
          name: province
          type: string
          required: true
          description: province
      responses:
        200:
          description: Delete priceList successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete price list successfully.",
            }
        400:
          description: Delete priceList failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Pricelist does not exist.",
            }
      security:
        - bearerAuth: []
  /service:
    get:
      tags:
        - "service"
      summary: get delivery service
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: pageSize
          type: string
          description: number of service in a page 
        - in: query
          name: keyword
          type: string
          description: keyword to be searched
        - in: query
          name: sortBy
          type: string
          description: sorting condition
        - in: query
          name: target
          type: string
          description: target filter
        - in: query
          name: tip
          type: string
          description: tip filter
      responses:
        200:
          description: get service successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get service information successfully.",
              "data": {
                "length": "number",
                "service": [
                  {
                  "name": "string",
                  "sub_detail": "string",    
                  "target": "string",   
                  "tip" : "string",
                  "quotes": ["quote1", "quote2"],
                  "logo": "path",
                  "banner": "path",
                  "features": ["feature1", "feature2"],    
                  "participants": ["participant1", "participant2"],   
                  "price": "string",  
                  "distances": ["distance1", "distance"],   
                  "price_files": ["path1", "path2"],       
                  }
                ]
              }
            }
        400:
          description: Service information is not found.
          schema:
            type: object
            example: {
              "service": false,
              "message": "Service information is not found.",
            }
  /service/{service}:
    get:
      tags:
        - "service"
      summary: get delivery service by id or name
      produces:
        - application/json
      parameters:
        - in: path
          name: service
          type: string
          description: Id/Name of a service 
          required: true
      responses:
        200:
          description: get service successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get service information successfully.",
              "data": {
                "name": "string",
                "sub_detail": "string",    
                "target": "string",   
                "tip" : "string",
                "quotes": ["quote1", "quote2"],
                "logo": "path",
                "banner": "path",
                "features": ["feature1", "feature2"],    
                "participants": ["participant1", "participant2"],     
                "price": "string",  
                "distances": ["distance1", "distance"],   
                "price_files": ["path1", "path2"],          
              }
            }          
        400:
          description: Service information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Service information is not found.",
            }
  /admin/service:
    post:
      tags:
        - "service"
      summary: "Create a new service"
      consumes:
        - application/json
      parameters:
        - in: body
          name: service
          description: a new service.
          schema:
            type: object      
            required: 
            - name, sub_detail, target   
            properties:
              name:
                type: string
              sub_detail: 
                type: string
              target:
                type: string     
              tip:
                type: string               
      responses:
        200:
          description: Create new service successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create new service successfully.",
              "data": {
                "name": "string",
                "sub_detail": "string",    
                "target": "string",   
                "tip" : "string",
                "quotes": ["quote1", "quote2"],
                "logo": "path",
                "banner": "path",
                "features": ["feature1", "feature2"],    
                "participants": ["participant1", "participant2"],     
                "price": "string",  
                "distances": ["distance1", "distance"],   
                "price_files": ["path1", "path2"],            
              }
            }    
        400:
          description: Create service failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "This service is already existed.",
            }
      security:
        - bearerAuth: []
  /admin/service/banner/{serviceId}:
    post:
      tags:
        - "service"
      summary: "Upload service banner"
      consumes:
        - multipart/form-data
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
        - in: formData
          name: banner
          description: banner of service.
          type: file     
      responses:
        200:
          description: Upload service banner successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Upload banner successfully.",
              "data": {
                "banner": "path",
              }
            }     
        400:
          description: Upload service failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Upload banner failed",
            }    
      security:
        - bearerAuth: []
  /admin/service/logo/{serviceId}:
    post:
      tags:
        - "service"
      summary: "Upload service logo"
      consumes:
        - multipart/form-data
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
        - in: formData
          name: logo
          description: a logo service.
          type: file 
      responses:
        200:
          description: Create service successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create service successfully.",
              "data": {
                "logo": "path",
              }
            }
        400:
          description: Create service failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create service failed.",
            }      
      security:
        - bearerAuth: []
  /admin/service/{serviceId}:
    put:
      tags:
        - "service"
      summary: "Update a existing service"
      consumes:
        - application/json
      parameters:
        - in: path
          name: serviceId
          schema: 
            type: string
          required: true
          description: service id
        - in: body
          name: service
          description: an existing service.
          schema:
            type: object
            type: object      
            required: 
            - name, sub_detail, target   
            properties:
              name:
                type: string
              sub_detail: 
                type: string
              target:
                type: string                  
      responses:
        200:
          description: Update service successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update service successfully.",
              "data": {
                "name": "string",
                "sub_detail": "string",    
                "target": "string",   
                "tip" : "string",   
              }
            }      
        400:
          description: Update service failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Service does not exist.",
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - "service"
      summary: "Delete an existing service"
      produces:
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
      responses:
        200:
          description: Delete service successfully.
          schema: 
            type: object
            example: {
              "success": true,
              "message": "Delete service successfully.",
            }
        400:
          description: Delete service failed.
          schema: 
            type: object
            example: {
              "success": false,
              "message": "Service does not exist.",
            }
      security:
        - bearerAuth: []

  /customer:
    get:
      tags:
        - customer
      summary: Get list of customers, get customer by id, search and sort, filter by customer type
      produces:
        - application/json
      parameters:
        - in: query
          name: id
          type: string
          description: id of customer
        - in: query
          name: keyword
          type: string
          description: keyword to search
        - in: query
          name: sort
          type: string
          description: sort by 1 or -1 (ascending or descending)
        - in: query
          name: filter
          type: string
          description: business, passers or intermediary
      responses:
        200:
          description: Get customers successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get customers successfully",
              "data": [
                {
                  "name": "string",
                  "address": "tring",
                  "description": "string",
                  "customer_type": "string",
                  "rank_passers": {
                    "point": "number",
                    "level": "string",
                  },
                  "companyTaxcode_business": "string",
                }
              ]
            }
        400:
          description: Get customers failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "No information found.",
            }
      security:
        - bearerAuth: []
  /customer/users:
    post:
      tags:
        - customer
      summary: Customer create child account
      produces:
        - application/json
      parameters:
        - in: body
          name: information create child account
          description: information create child account
          schema:
            type: object
            required:
              - name
              - phone
              - email
              - password
              - bank_name
              - bank_account_number
            properties:
              name:
                type: string
              phone:
                type: string
              password:
                type: string
              email:
                type: string
              bank_name:
                type: string
              bank_account_number:
                type: string
      responses:
        200:
          description: Create child account success.
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: Create child account success
              data:
                type: object
                properties:
                  newUser:
                    type: object
                    properties:
                      password:
                        type: string
                      email:
                        type: string
                      phone:
                        type: string
                      name:
                        type: string
                      role:
                        type: string
                  newCustomer:
                    type: object
                    properties:
                      name:
                        type: string
                      address:
                        type: string
                      description:
                        type: string
                      customer_type:
                        type: string
                      rank_passers:
                        type: object
                        properties:
                          point:
                            type: number
                          level:
                            type: string
                      companyTaxcode_business:
                        type: string
        404:
          description: Update customer failed
          schema:
            type: object
            example: {
              "success": false,
              "message": "Customer is not found",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - bearerAuth: []
  /customer/users/:phone:
    get:
      tags:
        - customer
      summary: Customer get child account
      produces:
        - application/json
      parameters:
        - in: path
          name: phone of child account
          description: phone of child account
          required: true
      responses:
        200:
          description: Get child account success.
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: get account success
              data:
                type: object
                properties:
                  users:
                    type: object
                    properties:
                      password:
                        type: string
                      email:
                        type: string
                      phone:
                        type: string
                      name:
                        type: string
                      role:
                        type: string
                  Customer_infor:
                    type: object
                    properties:
                      name:
                        type: string
                      address:
                        type: string
                      description:
                        type: string
                      customer_type:
                        type: string
                      rank_passers:
                        type: object
                        properties:
                          point:
                            type: number
                          level:
                            type: string
                      companyTaxcode_business:
                        type: string
        404:
          description: Update customer failed
          schema:
            type: object
            example: {
              "success": false,
              "message": "Customer is not found",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - bearerAuth: []
  /admin/customer/{id}:
    put:
      tags:
        - customer
      summary: Update a customer
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
        - in: body
          name: Customer information to update
          schema:
            type: object
            properties:
              name:
                type: string
              address:
                type: string
              description:
                type: string
              customer_type:
                type: string
              rank_passers:
                type: object
                properties:
                  point: 
                    type: number
                  level: 
                    type: string
              companyTaxcode_business:
                type: string
              accepted_business:
                type: boolean
      responses:
        200:
          description: Update customer successfully.
          schema:
            type: object
            example: {
              "success":  true,
              "message": "Customer updated successfully.",
            }
        400:
          description: Update customer failed
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Customer does not exist.",
              }
              "error2": {
                "success": false,
                "message": "Invalid customer type.",
              }
            }
      security:
        - bearerAuth: []
    delete:
      tags:      
        - customer
      summary: Delete a customer
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
      responses:
        200:
          description: Delete customer successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete customer user successfully.",
            }
        400:
          description: Delete customer failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Customer does not exist.",
            }
      security:
        - bearerAuth: []
  /admin/customer/customerDebt:
    get:
      tags:
        - customer
      summary: get customer debt
      consumes:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
        - in: body
          name: Customer debt information 
          schema:
            type: object
            properties:
              name:
                type: string
              address:
                type: string
              description:
                type: string
              customer_type:
                type: string
              rank_passers:
                type: object
                properties:
                  point: 
                    type: number
                  level: 
                    type: string
              companyTaxcode_business:
                type: string
              accepted_business:
                type: boolean
      responses:
        200:
          description: Get customer debt successfully.
          schema:
            type: object
            example: {
              "success":  true,
              "message": "Get order information successfully.",
              "data":{
                "totalCusTomerDebt": number,
                "listCustomer":[
                  {
                    "customerDebt": number,
                    "order":{
                      "_id": string,
                      "orderId": string,
                      "service": string,
                      "customer":{
                        "_id": string,
                        "name": string,
                        "email": string,
                        "phone": string,
                        "address": string,
                      },
                      "receiver": string,
                      "status": string,
                      "origin": string,
                      "destination": string,
                      "total_price": number,
                    }
                  }
                ]
              }
            }
        400:
          description: Get customer debt failed
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get order failed.",
              
              
            }
      security:
        - bearerAuth: []              
  /applicant/{careerId}:
    post:
      tags:
        - "applicant"
      summary: "Create a new applicant"
      consumes:
        - multipart/form-data
        - application/json
      parameters:
        - in: path
          name: careerId
          type: string
          required: true
          description: Id of a career 
          required: true
        - in: formData
          name: firstName
          description: firstName of applicant.
          type: string 
          required: true
        - in: formData
          name: lastName
          description: lastName of applicant.
          required: true
        - in: formData
          name: phoneNumber
          description: phoneNumber of applicant.
          type: string 
          required: true
        - in: formData
          name: email
          description: email of applicant.
          type: string 
          required: true
        - in: formData
          name: source
          description: source of interest of applicant(staff, friend, email, phone, facebook, linkedin, search, event, other).
          type: string 
          required: true
        - in: formData
          name: message
          description: Custom message.
          type: string  
          required: true  
        - in: formData
          name: file
          description: CV file of applicant.
          type: file 
          required: true         
      responses:
        200:
          description: Create applicant successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Added applicant in career successfully.",
            }        
        400:
          description: Create applicant failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "send CV failed.",
              }
              "error2": {
                "success": false,
                "message": "Confirmation cannot be sent to applicant email.",
              }
            }
  /admin/applicant:
    get:
      tags:
        - "applicant"
      summary: get applicant
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: pageSize
          type: string
          description: number of applicants in a page 
        - in: query
          name: sortBy
          type: string
          description: sort in order (firstName, lastName, -updatedAt)
        - in: query
          name: keyword
          type: string
          description: search by keyword
        - in: query
          name: department
          type: string
          description: filter by department
        - in: query
          name: type
          type: string
          description: filter by type
        - in: query
          name: location
          type: string
          description: filter by location
        - in: query
          name: status
          type: string
          description: filter by status
      responses:
        200:
          description: Get applicant information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get applicant information successfully.",
              "data": [
                {
                "firstName": "string",
                "lastName": "string",    
                "phoneNumber": "string",   
                "email" : "string",
                "source": "string",
                "message": "string",
                "status": "string",       
                }
              ]
            }          
        400:
          description: Applicant information is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Applicant information is not found.",
            }
      security:
        - bearerAuth: []
  /admin/applicant/{applicantId}:
    get:
      tags:
        - "applicant"
      summary: get applicant by id
      produces:
        - application/json
      parameters:
        - in: path
          name: applicantId
          type: string
          required: true
          description: Id of an applicant 
      responses:
        200:
          description: Get applicant information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get applicant information successfully.",
              "data": {
                "firstName": "string",
                "lastName": "string",    
                "phoneNumber": "string",   
                "email" : "string",
                "source": "string",
                "message": "string",
                "status": "string",       
              }
            }          
        400:
          description: Applicant does not exist.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Applicant does not exist.",
            }
      security:
        - bearerAuth: []
    put:
      tags:
        - "applicant"
      summary: "Update a existing applicant status"
      consumes:
        - application/json
      parameters:
        - in: path
          name: applicantId
          schema: 
            type: string
          required: true
          description: applicant id
        - in: body
          name: applicant
          description: an existing applicant.
          schema:
            type: object      
            required: 
            - status   
            properties:
              status:
                type: string
                description: (approved, pending, rejected)                 
      responses:
        200:
          description: Update applicant successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Update applicant successfully.",
              "data": {
                "status": "string",
              }
            }      
        400:
          description: Update applicant failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Applicant does not exist.",
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - "applicant"
      summary: "Delete an existing applicant"
      produces:
        - application/json
      parameters:
        - in: path
          name: applicantId
          type: string
          required: true
          description: Id of a applicant 
      responses:
        200:
          description: Delete applicant successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Delete applicant successfully.",
              "data": {
                "firstName": "string",
                "lastName": "string",    
                "phoneNumber": "string",   
                "email" : "string",
                "source": "string",
                "message": "string",
                "status": "string",       
              }
            }
        400:
          description: Delete applicant failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Applicant does not exist.",
            }
      security:
        - bearerAuth: []
  /admin/staff:
    get:
      tags: 
        - staff
      summary: get list of staffs
      produces:
        - application/json
      parameters:
        - in: query
          name: id
          type: string
          description: id of staff
        - in: query
          name: keyword
          type: string
          description: keyword for searching staff 
        - in: query
          name: sort
          type: number
          description: sort staff by order
        - in: query
          name: filter
          type: string
          description: admin, driver, shipper, storekeeper or staff
      responses:
        200:
          description: Get staff information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get staffs information successfully",
              "data": [
                {
                  "name": "Storekeeper",
                  "staff_type": "storekeeper",
                  "department": "string",
                  "car_fleet": "string",
                }
              ]
            }
      security:
        - bearerAuth: []
  /admin/staff/{staffId}:
    delete:
      tags:
        - staff
      summary: Delete staff by id
      produces:
        - application/json
      parameters:
        - in: path
          name: staffId
          type: string
          description: id of staff  
      responses:
        200:
          description: Delete staff user successfully.
          schema: 
            type: object
            example: {
              "success": true,
              "message": "Delete staff user successfully.",
            }
        400:
          description: Delete staff user failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Staff does not exist.",
            }
      security:
        - bearerAuth: []
    put:
      tags:
        - staff
      summary: Update staff by id
      produces:
        - application/json
      parameters:
        - in: path
          name: staffId
          type: string
          description: id of staff
        - in: body
          name: update content
          schema:
            type: object
            properties:
              name:
                type: string
              staff_type:
                type: string
              department:
                type: string
              car_fleet:
                type: string
      responses:
        200:
          description: Update staff information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Staff updated successfully.",
            }
        400:
          description: Update staff information failed.
          schema: 
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Staff does not exist.",
              }
              "error2": {
                "success": false,
                "message": "Staff-type not found.",
              }
            }
      security:
        - bearerAuth: []
  /admin/staff/department/{departmentId}:
    get:
      tags:
        - staff
      summary: Get staff by Department
      produces:
        - application/json
      parameters:
        - in: path
          name: departmentId
          type: string  
          description: Id of DepartmentId
      responses:
        200:
          description: Get departmental staff successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get departmental staff successfully.",
              "data": [
                {
                  "name": "string",
                  "staff_type": "string",
                  "department": "string",
                  "car_fleet": "string",
                }
              ]
            }
        400:
          description: get Infomation staff failer
          schema:
            type: object
            example: {
              "sucssess": false,
              "message": "Departmental does not exist.",
            }
      security:
        - bearerAuth: []
  /admin/carFleet:
    get:
      tags:
        - "carFleet"
      summary: "Admin get list of carfleets"
      consumes:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of carfleet on a page
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: keyword
          type: string
          description: keyword
        - in: query
          name: sortBy
          type: string
          description: sort by (name)
        - in: query
          name: carfleetId
          type: string
          description:  carfleetId
      responses:
        200:
          description: Get carfleet successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get carfleet successfully.",
              "data": [
                {
                  "_id": "String",
                  "name": "String",
                  "director": "String",
                  "bills": [],                  
                }
              ],          
            }
        400:
          description: carFleet information is not found.
      security:
        - bearerAuth: [] 
    post:
      tags:
        - "carFleet"
      summary: "Create a new carFleet"
      parameters:
        - in: body
          name: carFleet
          description: a new carFleet.
          schema:
            type: object
            required: true
            properties:
              name:
                type: string
                required: true
              director:
                type: string
      responses:
        200:
          description: Create carFleet successfully.
          schema:
            type: object
            example: {
            "name": "string",
            "director": "string",
            }
        400:
          description: Create carFleet failed.  
      security:
        - bearerAuth: [] 
  /admin/carFleet/{carFleetId}:
    put:
      tags:
        - "carFleet"
      summary: update carFleet
      produces:
        - application/json        
      consumes:
        - application/json
      parameters:
        - in: path
          name: carFleetId
          type: string
          required: true
          description: Id of a carFleet
        - in: body
          name: carFleet
          description: an updated carFleet.
          schema:
            type: object
            properties:
              name:
                type: string
                required: true
              director:
                type: string
      responses:
        200:
          description: update carFleet successfully.
          schema:
            type: object
            example: {
            "name": "string",
            "director": "string",
            }
        400:
          description: carFleet cannot be found. 
      security:
        - bearerAuth: []                         
    delete:
      tags:
        - "carFleet"
      summary: "Delete an existing carFleet"
      produces:
        - application/json
      parameters:
        - in: path
          name: carFleetId
          type: string
          required: true
          description: Id of a carFleet 
      responses:
        200:
          description: Delete carFleet successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
        400:
          description: Delete carFleet failed.      
      security:
        - bearerAuth: [] 
  /admin/carFleet/{name}:
    get:
      tags:
        - "carFleet"
      summary: get car fleet turnover information
      produces:
        - application/json
      parameters:
        - in: path
          name: name
          type: string
          required: true
          description: Name of carFleet
      responses:
        200:
          description: get carFleet information successfully.
          schema:
            type: object
            example: {
            "name": "string",
            "director": "string",
            "turnover": "number",
            "cars": "array",
            }
        400:
          description: cars turnover information is not found.     
      security:
        - bearerAuth: []  
  /admin/carFleet/car/{plate}:
    get:
      tags:
        - "carFleet"
      summary: get a single car turnover information
      produces:
        - application/json
      parameters:
        - in: path
          name: plate
          type: string
          required: true
          description: Plate of a car
      responses:
        200:
          description: get carFleet information successfully.
          schema:
            type: object
            example: {
            "name": "string",
            "director": "string",
            "turnover": "number",
            "cars": "array",
            }
        400:
          description: car turnover information is not found.
      security:
        - bearerAuth: [] 
  /admin/carfleet:
    get:
      tags:
        - "carFleet"
      summary: get single, all & cost_car_Fleet the bills' actual fuel projection has been completed.
      produces:
        - application/json
      parameters:
        - in: query
            name: name
            type: string
            description: name a car fleet
        - in: query
          name: page
          type: string
          description: number of page 
        - in: query
          name: pageSize
          type: string
          description: number of page size     
      responses:
        200:
          description: get carFleet information successfully.
          schema:
            type: object
            example: {
            "success": true,
            "message": "Get car successfully.",
            "data": {
              "length": "number",
              "totalCostCarFleet": "number",
              "carsFleet": [
                {
                  "_id": "string",
                  "name": "string",
                  "director": "string",
                  "bills": [
                    {
                      "_id": "string",
                      "actual_fuel": "number",
                      "theoretical_fuel": "number",
                      "status": "string",
                      "current_fuel_price":"number",
                      "product_shipments": [],
                    },
                  ],
                  "costCarFleet": "number",
                },
              ],
            },
            }
        400:
          description: carFleet  information is not found.
      security:
        - bearerAuth: []    
  /admin/carFleet/{carFleetId}/inventory:
    get:
      tags:
        - "carFleet"
      summary: get inventory of car fleet
      produces:
        - application/json
      parameters:
        - in: path
          name: carFleetId
          type: string
          required: true
          description: Id of car fleet
      responses:
        200:
          description: get inventory of car fleet successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get receivers successfully.",
              "data": [
                {
                  "shipment": "636b1eeb84aa30af66b63ded",
                  "product_name": "product_01",
                  "quantity": 1,
                  "unit": "kg",
                },
                {
                  "shipment": "636b1eeb84aa30af66b63dee",
                  "product_name": "product_01",
                  "quantity": 9,
                  "unit": "kg",
                },
              ]
            }
        400:
          description: car fleet or bills are not found.
      security:
        - bearerAuth: []
  /admin/receiver:
    get:
      tags: 
        - receiver
      summary: get list of receivers
      produces:
        - application/json
      parameters:
        - in: query
          name: id
          type: string
          description: id of receiver 
        - in: query
          name: keyword
          type: string
          description: keyword for searching receiver 
        - in: query
          name: sort
          type: number
          description: sort receiver by order
      responses:
        200:
          description: Get receivers successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get receivers successfully.",
              "data": [
                {
                  "name": "string",
                  "phone": "string",
                  "identity": "string",
                }
              ]
            }
        400:
          description: Get receivers failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "No information found.",
            }
      security:
        - bearerAuth: []
  /admin/receiver/{receiverId}:
    put:
      tags:
        - receiver
      summary: Update receiver by id
      produces:
        - application/json
      parameters:
        - in: path
          name: receiverId
          type: string
          description: id of receiver 
        - in: body
          name: update content
          schema:
            type: object
            properties:
              name:
                type: string                
              phone:
                type: string
              identity:
                type: string
      responses:
        200:
           description: Update receiver successfully. 
           schema:
            type: object
            example: {
              "success": true,
              "message": "Receiver updated successfully.",
            }
        400:
          description: Update receiver failed
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Receiver does not exist.",
              }
              "error2": {
                "success": false,
                "message": "identity value is existed.",
              }
            }
      security:
        - bearerAuth: []
    delete:
      tags:
        - receiver
      summary: Delete receiver by id
      produces:
        - application/json
      parameters:
        - in: path
          name: receiverId
          type: string
          description: id of receiver  
      responses:
        200:
          description: Receiver deleted successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Receiver deleted successfully.",
            }
        400:
          description: Receiver not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Receiver does not exist.",
            }
      security:
        - bearerAuth: []
  /receiver/{orderId}:
    put:
      tags:
        - receiver
      summary: Update receiver by customer if order is waiting
      produces:
        - application/json
      parameters:
        - in: path
          name: orderId
          type: string
          description: id of order to check 
        - in: body
          name: update content
          schema:
            type: object
            properties:
              name:
                type: string
              phone:
                type: string
              identity:
                type: string
      responses:
        200:
           description: Update receiver successfully. 
           schema:
            type: object
            example: {
              "success": true,
              "message": "Receiver updated successfully.",
            }
        400:
          description: Update receiver failed.
          schema:
            type: object
            example: {
              "error1": {
                "success": false,
                "message": "Order not found.",
              }
              "error2": {
                "success": false,
                "message": "Cannot update receiver while order is completed.",
              }
            }
      security:
        - bearerAuth: []
  /admin/turnover:
    get:
      tags:
        - "turnover"
      summary: get turnover information  
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of turnovers on a page
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: keyword
          type: string
          description: keyword
        - in: query
          name: sortBy
          type: string
          description: sort by
        - in: query
          name: payment_method
          type: string
          description:  payment method
        - in: query
          name: type_of_turnover
          type: string
          description: type of turnover
      responses:
        200:
          description: get turnover information successfully.
          schema:
            type: object
            example: {
              "total": "number",
              "payment_method": "string",
              "paid": "number",
              "type_of_turnover": "string",
              "refund": "number",
              "bill": "object",
              "order": "object",
              "message": "string",
            }
        400:
          description: turnover information is not found.   
      security:
        - bearerAuth: []     

  /admin/turnover/{turnoverId}:
    get:
      tags:
        - "turnover"
      summary: get turnover by id
      produces:
        - application/json
      parameters:
        - in: path
          name: turnoverId
          type: string
          required: true
          description: Id of a turnover
      responses:
        200:
          description: get turnover information successfully.
          schema:
            type: object
            example: {
              "total": "number",
              "payment_method": "string",
              "paid": "number",
              "type_of_turnover": "string",
              "refund": "number",
              "bill": "object",
              "order": "object",
              "message": "string",
            }
        400:
          description: turnover does not exist.
        402:
          description: turnover information is not found.
      security:
        - bearerAuth: [] 
  /admin/turnover/warehouse/{idwarehouse}:  
    get:
      tags:
        - "turnover"
      summary: get turnover by idWarehouse
      produces: 
        - application/json
      parameters:
        - in: path
          name: idwarehouse
          type: string
          required: turnover
          description: Id of a warehouse
      responses:
        200:
          description: get turnover warehouse successfully
          schema:
            type: object
            example: {
              "Name": "string",
              "Turnover": "number",
            }
        400:
          description: Id a warehouse does not exitst.
          description: Id a warehouse field is not avaliable
      security:
        - bearerAuth: []
  /admin/turnover/car/{carid}:
    get:
      tags:
        - "turnover"
      summary: get turnover by ID Car
      produces:
        - application/json
      parameters:
        - in: path
          name: carid
          type: string
          required: turnover
          description: Id of a Car
        - in: query
          name: fromdate
          type: date
          description: From Date (EX:2022-11-07) if you type in from date you need type in todate 
        - in: query
          name: todate
          type: date
          description: To Date          
      responses:
        200:
          description: get turnover car successfully
          schema:
            type: object
            example: {
              "Name Car": "String",
              "Total revenue": "number",
              "Acctual Fuel": "number",
              "Carrepair": "number",
              "Profit": "number",
            }
        400:
          description: Id a car does not exitst.
        400:
          description: Id a car field is not avaliable
      security:
        - bearerAuth: []
  /admin/turnover/carfleet/{carfleetid}:
    get:
      tags:
        - "turnover"
      summary: get turnover by ID Cafllet
      produces:
        - application/json
      parameters:
        - in: path
          name: carfleetid
          type: string
          required: true
          description: Id of turnover
        - in: query
          name: fromdate
          type: date
          description: From Date (EX:2022-11-07) if you type in from date you need type in todate 
        - in: query
          name: todate
          type: date
          description: To Date  
      responses:
        200:
          description: get turnover car successfully
          schema:
            type: object
            example: {
              "Name Cafleet": "String",
              "Total revenue": "number",
              "Acctual Fuel": "number",
              "ToTalPriceRepair": "number",
              "Profit": "number",
            }
        400:
          description: Id a carFleet does not exitst.
        400:
          description: Id a carFleet field is not avaliable
      security:
        - bearerAuth: []
  /admin/turnover/enterprise/total:
    get:
      tags:
        - "turnover"
      summary: get turnover by ID Car
      produces:
        - application/json
      parameters:
        - in: query
          name: fromdate
          type: date
          description: From Date (EX:2022-11-07) if you type in from date you need type in todate 
        - in: query
          name: todate
          type: date
          description: To Date          
      responses:
        200:
          description: get turnover car successfully
          schema:
            type: object
            example: {
              "Name Car": "String",
              "Total revenue": "number",
              "Theoretical Fuel": "number",
              "Carrepair": "number",
              "Profit": "number",
            }
        400:
          description: Id a car does not exitst.
        400:
          description: Id a car field is not avaliable
      security:
        - bearerAuth: []
  /admin/carrepair:
    get: 
      tags:
        - "carrepair"
      summary: get carrepair
      produces:
        - application/json
      parameters:
        - in: query
          name: repairCar_type
          type: string
          description: repairCar_type of car(ex Repair, Replace)
        - in: query
          name: device
          type: string
          description: device of car(ex Shell, Battery, Oil, Tire, Other)
        - in: query
          name: page
          type: string
          description: number of page 
        - in: query
          name: pageSize
          type: string
          description: number of page size 
      responses:
        200:
          description: get carrepair successfully.
          schema:
            type: object
            example: {
                
                "car": "ObjectID",
                "repairCar_type": "String",
                "device": "String",
                "price": int,
                "note": "String",
            }
        400:
          description: carrpair in not found
      security:
        - bearerAuth: []    
  /admin/carrepair/{carrepairId}:
    get:
      tags:
        - "carrepair"
      summary: get carrepair by id
      produces:
        - application/json
      parameters:
        - in: path
          name: carrepairId
          type: string
          required: true
          description: Id of a carrent
      responses:
        200:
          description: get carrepair successfully.
          schema:
            type: object
            example: {
                "car": "ObjectID",
                "repairCar_type": "String",
                "device": "String",
                "price": int,
                "note": "String",
            }
        400:
          description: Carrepair is not found
      security:
        - bearerAuth: []   
    put:
      tags:
        - "carrepair"
      summary: Update carrepair by id
      produces:
        - application/json
      parameters:
        - in: path
          name: carrepairId
          type: string
          description: Id Of an Carrepair
        - in: body
          name: update content
          schema:
            type: object
            properties:
              car:
                type: String
                enum: ObjectId
              carepairCar_typer:
                type: string
                enum: ['Repair', 'Replace']
              device:
                type: string
                enum: ['Shell', 'Battery', 'Oil', 'Tire', 'Other']  
              price:
                type: number
              note:
                type: string              
      responses:
        200:
          description: update carrepair successfully.
          schema:
            type: object
            example: {
                "car": "ObjectID",
                "repairCar_type": "String",
                "device": "String",
                "price": int,
                "note": "String",
            }
        400:
          description: update carrepair failed
      security:
        - bearerAuth: []   
        
    delete:
      tags:
        - "carrepair"
      summary: delete carrepair by ID
      produces:
         - application/json
      parameters:
        - in: path
          name: carrepairId
          type: String
          description: id of Carrepair
      responses:
        200:
          description: delete carrepair successfully.
        400:
          description: Id carrepair not found
      security:
        - bearerAuth: []    
  /admin/carrepair/car/{plate}:
    get:
      tags:
      - "carrepair"
      summary: get history repair car by plate
      consumes:
        - application/json
      parameters:
        - in: path
          name: plate
          type: string
          required: true
          description: plate car
      responses:
        200:
          description: get history repair car successfully.
          schema:
            type: object
            example: {
                "car": ObjectId,
                "repairCar_type": String,
                "device": String,
                "price": int,
                "note": string,
                "createdAt": Date,
                "updatedAt": Date,
            }
        400:
          description: Not information found.
      security:
        - bearerAuth: []
  /admin/carrepair/create:
    post:
      tags:
      - "carrepair"
      summary: "create a new Carrepair"
      consumes:
        - application/json
      parameters:
        - in: body
          name: road
          description: a new carrepair.
          schema:
            type: object
            properties:
              car:
                type: string
                enum: ObjectId
              repairCar_type:
                type: string
                enum: ['Repair', 'Replace']
              device:
                type: string
                enum: ['Shell', 'Battery', 'Oil', 'Tire', 'Other']  
              price:
                type: number
              note:
                type: string       
      responses:
        200:
          description: Create carrepair successfully.
        400:
          description: Create carrepair failed.
      security:
        - bearerAuth: []
  /admin/notification:
    post:
      tags:
        - notificationtocarfleet
      summary: post mail to carfleet when car expired 
      produces:
        - application/json
      responses:
        200:
          description: create Notification successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "create Notification successfully",
            }   
        400:
          description: post Notification Failed    
      security:
        - bearerAuth: []
  /blog:
    get:
      tags:
        - "blog"
      summary: get all blog
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of blog on a page
        - in: query
          name: page
          type: string
          description: number of page
        - in: query
          name: keyword
          type: string
          description: search by keyword
        - in: query
          name: sortBy
          type: string
          description: sort in blog
        - in: query
          name: title
          type: string
          description: title of blog
        - in: query
          name: description
          type: string
          description: description of blog
        - in: query
          name: content
          type: string
          description: content of blog
        - in: query
          name: categorys
          type: string
          description: categorys of blog
      responses:
        200:
          description: Get blog successfully
          schema:
            type: object
            example: {
              "success": true,
              "message": "Get blog successfully.",
              "data": {
                "length": "number",
                "blog": [
                  {
                    "_id": "id",
                    "title": "string",
                    "description": "string",
                    "content": "string",
                    "date": "string",
                    "categorys": "string",
                    "picture": "string",
                    "createAt": "string",
                    "updateAt": "string",
                    "__v": "number",
                  }
                ]
              }
            }
        400:
          description: Get blog failed
          schema:
            type: object
            example: {
              "success": false,
              "message": "Get blog failed.",
            }
  /blog/{blogID}:
    get:
      tags: 
        - "blog"
      summary: get blog by id
      produces:
        - application/json
      parameters:
        - in: path
          name: blogID
          type: string
          required: true
          description: ID of a blog
      responses:
        200:
          description: Get blog successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get blog successfully.",
              "data": {
                "_id": "id",
                "title": "string",
                "description": "string",
                "content": "string",
                "date": "string",
                "categorys": "string",
                "picture": "string",
                "createAt": "string",
                "updateAt": "string",
                "__v": "number",
              }
            }
        400:
          description: Get blog failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Get blog failed.",
            }
  /admin/blog:
    post:
      tags:
        - "blog"
      summary: "Create a new blog"
      consumes:
        - multipart/form-data
        - application/json
      parameters:
        - in: formData
          name: title
          type: string
          description: title
          required: true
        - in: formData
          name: description
          type: string
          description: description
          required: true
        - in: formData
          name: content
          type: string
          description: content
          required: true
        - in: formData 
          name: categorys
          type: string
          enum: ['Industry news', 'Event', 'J-Magazine']
        - in: formData
          name: picture
          type: file
          description: picture
          required: true
      responses:
        200:
          description: Create blog successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Create blog successfully",
              "data": {
                "_id": "id",
                "title": "string",
                "description": "string",
                "content": "string",
                "date": "string",
                "categorys": "string",
                "picture": "string",
                "createAt": "string",
                "updateAt": "string",
                "__v": "number",
              }
            }
        400:
          description: Create blog failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Create blog failed.",
            }
      security:
        - bearerAuth: []
  /admin/blog/{blogID}:
    put:
      tags: 
        - "blog"
      summary: "Update a blog"
      consumes:
        - multipart/formData
        - application/json
      parameters:
        - in: path
          name: blogID
          type: string
          description: ID of a blog
          required: true
        - in: formData
          name: title
          description: title
        - in: formData
          name: description
          description: description
        - in: formData
          name: content
          description: content
        - in: formData
          name: categorys
          type: string
          enum: ['Industry news', 'Event', 'J-Magazine']
        - in: formData
          name: picture
          type: file
          description: picture
          required: false
      responses:
        200:
          description: Update blog successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Update blog successfully.",
            }
        400:
          description: Update blog failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Update blog failed.",
            }
      security:
        - bearerAuth: [] 
    delete:
      tags: 
        - "blog"
      summary: "Delete a blog"
      consumes:
        - application/json
      parameters:
        - in: path
          name: blogID
          type: string
          description: ID of a blog
          required: true
      responses:
        200:
          description: Delete blog successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Delete blog successfully.",
            }
        400:
          description: Delete blog failed
          schema:
            type: object
              example: {
                "success": "false",
                "message": "Delete blog failed.",
              }
      security:
        - bearerAuth: []

  /export:
    get:
      tags:
        - "excel"
      summary: "Export file excel"
      consumes:
          description: Id of an customer
      parameters:
        - in: query
          name: orderId
          type: string
          description: ID of order
          required: true
      responses:
        200:
          description: Export successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Export file successfully.",
            }
        400:
          description: Export failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Export file successfully.",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - bearerAuth: [] 
  /admin/export:
    get:
      tags:
        - "excel"
      summary: "Export file excel"
      consumes:
          description: Field want to export
      parameters:
        - in: query
          name: Bill_of_lading
          type: string
          description: true or nothing
        - in: query
          name: Confirm_staff
          type: string
          description: true or nothing
        - in: query
          name: PickUp_staff
          type: string
          description: true or nothing
        - in: query
          name: Shipping_department
          type: string
          description: true or nothing
        - in: query
          name: Note
          type: string
          description: true or nothing
        - in: query
          name: Standard_fee
          type: string
          description: true or nothing
        - in: query
          name: Delivery_company
          type: string
          description: true or nothing
        - in: query
          name: Sender
          type: string
          description: true or nothing
        - in: query
          name: Sender_phone
          type: string
          description: true or nothing
        - in: query
          name: Total_amount_after_discount
          type: string
          description: true or nothing
        - in: query
          name: Remote_area_surcharge
          type: string
          description: true or nothing
        - in: query
          name: Total_amount_after_tax_and_discount
          type: string
          description: true or nothing
        - in: query
          name: VAT
          type: string
          description: true or nothing
        - in: query
          name: Total_amount_before_discount
          type: string
          description: true or nothing
        - in: query
          name: Amount_payable
          type: string
          description: true or nothing
        - in: query
          name: Discount_amount
          type: string
          description: true or nothing
        - in: query
          name: Fuel_surcharge
          type: string
          description: true or nothing
        - in: query
          name: Other_fees
          type: string
          description: true or nothing
        - in: query
          name: Copyright_fee
          type: string
          description: true or nothing
        - in: query
          name: Insurance_premium
          type: string
          description: true or nothing
        - in: query
          name: COD
          type: string
          description: true or nothing
        - in: query
          name: Chargeable_weight
          type: string
          description: true or nothing
        - in: query
          name: Content_of_goods
          type: string
          description: true or nothing
        - in: query
          name: Destination_area_code
          type: string
          description: true or nothing
        - in: query
          name: origin
          type: string
          description: true or nothing
      responses:
        200:
          description: Export successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Export file successfully.",
            }
        400:
          description: Export failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Export file successfully.",
            }
        500:
          description: Server Interval Error.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Server Interval Error",
            }
      security:
        - bearerAuth: []    
  /individual-contract:
    post:
      tags:
        - "individual-contract"
      summary: "Create a new individual-contract"
      consumes:
        - multipart/form-data
      parameters:         
        - in: formData
          name: name
          description: customer's name.
          type: string
          required: true
        - in: formData
          name: phone
          description: customer's phone .
          type: number
          required: true
        - in: formData
          name: area
          description: customer's address.
          type: string
          required: true
        - in: formData
          name: email
          description: customer's email.
          type: string
          required: true
        - in: formData
          name: id_personal
          description: customer's id_personal.
          type: number
          required: true
        - in: formData
          name: bank_account_holders
          description: customer's bank_account_holders.
          type: string
          required: true
        - in: formData
          name: bank_account_number
          description: customer's bank_account_number.
          type: number
          required: true
        - in: formData
          name: bank_name
          description: customer's bank_name.
          type: string
          required: true
        - in: formData
          name: bank_branch
          description: customer's bank_branch.
          type: string
          required: true
        - in: formData
          name: ID_front_photo
          description: customer's ID_front_photo.
          type: file
          required: true
        - in: formData
          name: ID_back_photo
          description: customer's ID_back_photo.
          type: file
          required: true
        - in: formData
          name: portrait_photo
          description: customer's portrait_photo.
          type: file
          required: true
      responses:
        200:
          description: Create information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create information successfully.",
            }
        400:
          description: Create information failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create information failed.",
            }
      security:
        - bearerAuth: []     
    get:
      tags:
        - "individual-contract"
      summary: get individual-contract
      produces:
        - application/json
      responses:
        200:
          description: get individual-contract successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get individual-contract successful.",
              "data": {
                "_id": "id",
                "customer": "string",
                "name": "string",
                "phone": "number",
                "area": "string",
                "email": "string",
                "id_personal": "number",
                "bank_account_holders": "string",
                "bank_account_number": "number",
                "bank_name": "string",
                "bank_branch": "string",
                "ID_front_photo": "path",
                "ID_back_photo": "path",
                "portrait_photo": "path",
              }
            }
        400:
          description: customerId is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "customer is not found.",
            }
      security:
        - bearerAuth: []    
  /individual-contract/{id}:
    delete:
      tags:
        - individual-contract
      summary: user delete individual-contract
      consumes:
        - application/json
      parameters:
      - in: path
        name: id
        description: id of contract
      responses:
        200:
          description: delete your individual-contract successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "delete your individual-contract successfully.",
            }
        400:
          description: delete your individual-contract failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "delete your individual-contract failed.",
            }
      security:
        - bearerAuth: []  
  /admin/individual-contract/{customerId}:
    post:
      tags:
        - "individual-contract"
      summary: "Create a new individual-contract"
      consumes:
        - multipart/form-data
      parameters:    
        - in: path
          name: id     
        - in: formData
          name: name
          description: customer's name.
          type: string
          required: true
        - in: formData
          name: phone
          description: customer's phone .
          type: number
          required: true
        - in: formData
          name: area
          description: customer's address.
          type: string
          required: true
        - in: formData
          name: email
          description: customer's email.
          type: string
          required: true
        - in: formData
          name: id_personal
          description: customer's id_personal.
          type: number
          required: true
        - in: formData
          name: bank_account_holders
          description: customer's bank_account_holders.
          type: string
          required: true
        - in: formData
          name: bank_account_number
          description: customer's bank_account_number.
          type: number
          required: true
        - in: formData
          name: bank_name
          description: customer's bank_name.
          type: string
          required: true
        - in: formData
          name: bank_branch
          description: customer's bank_branch.
          type: string
          required: true
        - in: formData
          name: ID_front_photo
          description: customer's ID_front_photo.
          type: file
          required: true
        - in: formData
          name: ID_back_photo
          description: customer's ID_back_photo.
          type: file
          required: true
        - in: formData
          name: portrait_photo
          description: customer's portrait_photo.
          type: file
          required: true
      responses:
        200:
          description: Create information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create information successfully.",
            }
        400:
          description: Create information failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create information failed.",
            }
      security:
        - bearerAuth: []        
    delete:
      tags:
        - individual-contract
      summary: user delete individual-contract
      consumes:
        - application/json
      parameters:
      - in: path
        name: id
      responses:
        200:
          description: delete your individual-contract successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "delete your individual-contract successfully.",
            }
        400:
          description: delete your individual-contract failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "delete your individual-contract failed.",
            }
      security:
        - bearerAuth: []   
  /admin/individual-contract:
    get:
      tags:
        - "individual-contract"
      summary: get individual-contract
      produces:
        - application/json
      responses:
        200:
          description: get individual-contract successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get individual-contract successful.",
              "data": {
                "_id": "id",
                "customer": "string",
                "name": "string",
                "phone": "number",
                "area": "string",
                "email": "string",
                "id_personal": "number",
                "bank_account_holders": "string",
                "bank_account_number": "number",
                "bank_name": "string",
                "bank_branch": "string",
                "ID_front_photo": "path",
                "ID_back_photo": "path",
                "portrait_photo": "path",
              }
            }
        400:
          description: customerId is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "customer is not found.",
            }
      security:
        - bearerAuth: []  
  /business-contract:
    post:
      tags:
        - "business-contract"
      summary: "Create a new business-contract"
      consumes:
        - multipart/form-data
      parameters:         
        - in: formData
          name: company
          description: company's name.
          type: string
          required: true
        - in: formData
          name: name
          description: customer's name.
          type: string
          required: true
        - in: formData
          name: phone
          description: customer's phone .
          type: number
          required: true
        - in: formData
          name: area
          description: customer's area.
          type: string
          required: true
        - in: formData
          name: address
          description: detail address.
          type: string
          required: true
        - in: formData
          name: email
          description: customer's email.
          type: string
          required: true
        - in: formData
          name: position
          description: customer's position.
          type: string
          required: true
        - in: formData
          name: tax
          description: tax code.
          type: string
          required: true
        - in: formData
          name: bank_account_holders
          description: customer's bank_account_holders.
          type: string
          required: true
        - in: formData
          name: bank_account_number
          description: customer's bank_account_number.
          type: number
          required: true
        - in: formData
          name: bank_name
          description: customer's bank_name.
          type: string
          required: true
        - in: formData
          name: bank_branch
          description: customer's bank_branch.
          type: string
          required: true
        - in: formData
          name: ID_front_photo
          description: customer's ID_front_photo.
          type: file
          required: true
        - in: formData
          name: ID_back_photo
          description: customer's ID_back_photo.
          type: file
          required: true
        - in: formData
          name: portrait_photo
          description: customer's portrait_photo.
          type: file
          required: true
      responses:
        200:
          description: Create information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create information successfully.",
            }
        400:
          description: Create information failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create information failed.",
            }
      security:
        - bearerAuth: []     
    get:
      tags:
        - "business-contract"
      summary: get business-contract
      produces:
        - application/json
      responses:
        200:
          description: get business-contract successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get business-contract successful.",
              "data": {
                "_id": "id",
                "company": "string",
                "customer": "string",
                "name": "string",
                "phone": "number",
                "area": "string",
                "address": "string",
                "email": "string",
                "position": "string",
                "tax_code": "number",
                "bank_account_holders": "string",
                "bank_account_number": "number",
                "bank_name": "string",
                "bank_branch": "string",
                "ID_front_photo": "path",
                "ID_back_photo": "path",
                "portrait_photo": "path",
              }
            }
        400:
          description: customerId is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "customer is not found.",
            }
      security:
        - bearerAuth: []    
  /business-contract/{id}:
    delete:
      tags:
        - business-contract
      summary: user delete business-contract
      consumes:
        - application/json
      parameters:
      - in: path
        name: id
        description: id of contract
      responses:
        200:
          description: delete your business-contract successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "delete your business-contract successfully.",
            }
        400:
          description: delete your business-contract failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "delete your business-contract failed.",
            }
      security:
        - bearerAuth: []  
  /admin/business-contract/{customerId}:
    post:
      tags:
        - "business-contract"
      summary: "Create a new business-contract"
      consumes:
        - multipart/form-data
      parameters:    
        - in: path
          name: id     
        - in: formData
          name: company
          description: company's name.
          type: string
          required: true
        - in: formData
          name: name
          description: customer's name.
          type: string
          required: true
        - in: formData
          name: phone
          description: customer's phone .
          type: number
          required: true
        - in: formData
          name: area
          description: customer's area.
          type: string
          required: true
        - in: formData
          name: address
          description: detail address.
          type: string
          required: true
        - in: formData
          name: email
          description: customer's email.
          type: string
          required: true
        - in: formData
          name: position
          description: customer's position.
          type: string
          required: true
        - in: formData
          name: tax
          description: tax code.
          type: string
          required: true
        - in: formData
          name: bank_account_holders
          description: customer's bank_account_holders.
          type: string
          required: true
        - in: formData
          name: bank_account_number
          description: customer's bank_account_number.
          type: number
          required: true
        - in: formData
          name: bank_name
          description: customer's bank_name.
          type: string
          required: true
        - in: formData
          name: bank_branch
          description: customer's bank_branch.
          type: string
          required: true
        - in: formData
          name: ID_front_photo
          description: customer's ID_front_photo.
          type: file
          required: true
        - in: formData
          name: ID_back_photo
          description: customer's ID_back_photo.
          type: file
          required: true
        - in: formData
          name: portrait_photo
          description: customer's portrait_photo.
          type: file
          required: true
      responses:
        200:
          description: Create information successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "Create information successfully.",
            }
        400:
          description: Create information failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "Create information failed.",
            }
      security:
        - bearerAuth: []        
    delete:
      tags:
        - business-contract
      summary: user delete business-contract
      consumes:
        - application/json
      parameters:
      - in: path
        name: id
      responses:
        200:
          description: delete your business-contract successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "delete your business-contract successfully.",
            }
        400:
          description: delete your business-contract failed.
          schema:
            type: object
            example: {
              "success": false,
              "message": "delete your business-contract failed.",
            }
      security:
        - bearerAuth: []   
  /admin/business-contract:
    get:
      tags:
        - "business-contract"
      summary: get business-contract
      produces:
        - application/json
      responses:
        200:
          description: get business-contract successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get business-contract successful.",
              "data": {
                "_id": "id",
                "company": "string",
                "customer": "string",
                "name": "string",
                "phone": "number",
                "area": "string",
                "address": "string",
                "email": "string",
                "position": "string",
                "tax_code": "number",
                "bank_account_holders": "string",
                "bank_account_number": "number",
                "bank_name": "string",
                "bank_branch": "string",
                "ID_front_photo": "path",
                "ID_back_photo": "path",
                "portrait_photo": "path",
              }
            }
        400:
          description: customerId is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "customer is not found.",
            }
      security:
        - bearerAuth: []   
  /admin/totalcost:
    get:
      tags:
        - "totalcost"
      summary: get totalcost
      produces:
        - application/json
      responses:
        200:
          description: get totalcost successfully.
          schema:
            type: object
            example: {
              "success": true,
              "message": "get individual-contract successful.",
             
            }
        400:
          description: customerId is not found.
          schema:
            type: object
            example: {
              "success": false,
              "message": "customer is not found.",
            }
      security:
        - bearerAuth: []   
  /discount/{customerId}:
    get:
      tags: 
        - "discount"
      summary: get discount list of a customer
      produces:
        - application/json
      parameters:
        - in: path
          name: customerId
          type: string
          required: true
          description: ID of a customer
      responses:
        200:
          description: Get discount successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get list discount successfully.",
              "data": {
                "_id": "id",
                "customerId": "string",
                "discount": "number",
                "createAt": "string",
                "updateAt": "string",
                "__v": "number",
              }
            }
        400:
          description: Get discount failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Get discount failed.",
            }
  /admin/discount:
    get:
      tags: 
        - "discount"
      summary: get all discount
      produces:
        - application/json
      responses:
        200:
          description: Get discount successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "get discount information successfully.",
              "data": [
                {
                  "_id": "id",
                  "customerId": "string",
                  "discount": "number",
                  "createAt": "string",
                  "updateAt": "string",
                  "__v": "number",
                }
              ]
            }
        400:
          description: Get discount failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "discount is not found.",
            }
    post:
      tags: 
        - "discount"
      summary: create discount for all customers
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema :
            type : object
            properties:
              title:
                type : string
                description: name of discount
                example: "string"
              rank:
                type : string
                description: rank of customer
                example: "unrank"
                enum: ['titan', 'gold', 'silver', 'bronze','unrank']
              description:
                type : string
                description: description of discount
                example: "string"
              discount:
                type : number
                description: discount percent
                example: 33
              image:
                type : string
                example: "string"
              status:
                type : boolean
                description: the discount is used or not
                example: false
              start_date:
                type : string
                description: start date of discount
                example: "2024-08-06"
              end_date:
                type : string
                description: end date of discount
                example: "2025-09-06"
      responses:
        200:
          description: Create discount successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Create discount successfully.",
              "data": {
                "_id": "id",
                "customerId": "string",
                "discount": "number",
                "createAt": "string",
                "updateAt": "string",
                "__v": "number",
              }
            }
        400:
          description: Create discount failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Create discount failed.",
            }
  /admin/discount/{customerId}:
    post:
      tags: 
        - "discount"
      summary: create discount for 1 customers
      consumes:
        - application/json
      parameters:
        - in: path
          name: customerId
          type: string
          required: true
          description: id of a customer
        - in: body
          name: body
          required: true
          schema :
            type : object
            properties:
              title:
                type : string
                description: name of discount
                example: "string"
              rank:
                type : string
                description: rank of customer
                example: "unrank"
                enum: ['titan', 'gold', 'silver', 'bronze','unrank']
              description:
                type : string
                description: description of discount
                example: "string"
              discount:
                type : number
                description: discount percent
                example: 33
              image:
                type : string
                example: "string"
              status:
                type : boolean
                description: the discount is used or not
                example: false
              start_date:
                type : string
                description: start date of discount
                example: "2024-08-06"
              end_date:
                type : string
                description: end date of discount
                example: "2025-09-06"
      responses:
        200:
          description: Create discount successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Create discount successfully.",
              "data": {
                "_id": "id",
                "customerId": "string",
                "discount": "number",
                "createAt": "string",
                "updateAt": "string",
                "__v": "number",
              }
            }
        400:
          description: Create discount failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Create discount failed.",
            }
  /admin/discount/{rank}:
    get:
      tags: 
        - "discount"
      summary: get discount by rank
      produces:
        - application/json
      parameters:
        - in: path
          name: rank
          type: string
          required: true
          description: rank of a customer ( titan ,  gold ,  silver ,  bronze , unrank  )
      responses:
        200:
          description: Get discount successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "get discount successfully.",
              "data": [
                {
                  "_id": "id",
                  "customerId": "string",
                  "discount": "number",
                  "createAt": "string",
                  "updateAt": "string",
                  "__v": "number",
                }
              ]
            }
        400:
          description: Get discount failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Discount not found.",
            }
  /admin/discount/type/{typeId}:
    put:
      tags: 
        - "discount"
      summary: update discount by type
      consumes:
        - application/json
      parameters:
        - in: path
          name: typeId
          type: string
          description: ID of a discount type
          required: true
        - in: body
          name: body
          description: name of discount
          required: true
          schema :
            type : object
            properties:
              title:
                type : string
                example: "string"
              rank:
                type : string
                example: "unrank"
                enum: ['titan', 'gold', 'silver', 'bronze','unrank']
              description:
                type : string
                example: "string"
              discount:
                type : number
                example: 33
              image:
                type : string
                example: "string"
              status:
                type : boolean
                example: false
              start_date:
                type : string
                example: "2024-08-06"
              end_date:
                type : string
                example: "2025-09-06"
      responses:
        200:
          description: Update discount successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "update discount information successfully.",
              "data": {
                "_id": "id",
                "customerId": "string",
                "discount": "number",
                "createAt": "string",
                "updateAt": "string",
                "__v": "number",
              }
            }
        400:
          description: Update discount failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Update discount failed.",
            }
    delete:
      tags: 
        - "discount"
      summary: delete discount by type
      consumes:
        - application/json
      parameters:
        - in: path
          name: typeId
          type: string
          description: ID of a discount type
          required: true
      responses:
        200:
          description: Delete discount successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Delete discount type successfully.",
            }
        400:
          description: Delete discount failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Discount type is not found.",
            }
  /admin/discount/{_id}:
    delete:
      tags: 
        - "discount"
      summary: delete discount by id
      consumes:
        - application/json
      parameters:
        - in: path
          name: _id
          type: string
          description: ID of a discount
          required: true
      responses:
        200:
          description: Delete discount successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Delete discount successfully.",
              "data": {
                "_id": "id",
                "customerId": "string",
                "discount": "number",
                "createAt": "string",
                "updateAt": "string",
                "__v": "number",
              }
            }
        400:
          description: Delete discount failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Discount is not found.",
            }
    
  /suggest:
    get:
      tags: 
        - "suggest"
      summary: a customer get all suggest
      produces:
        - application/json
      responses:
        200:
          description: Get suggest successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get suggest successfully.",
              "data": [
                {
                  "_id": "id",
                  "customer": "string",
                  "phone": "string",
                  "address": "string",
                  "orderId": "string",
                  "content": "string",
                }
              ]
            }
        400:
          description: Inexistent customer
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Customer not found.",
            }
        400:
          description: Invalid orderId
          schema:
            type: object
            example: {
              "success": "false",
              "message": "No suggest found.",
            }
      security:
        - bearerAuth: []
    post:
      tags: 
        - "suggest"
      summary: a customer create a suggest
      consumes:
        - application/json
      parameters:
        - in: header
          name: Authorization
          type: string
          description: token of customer
          required: true
        - in: body
          name: phone
          type: string
          description: require to input phone number if it not found in user. Prioritize keyboard input
        - in: body
          name: address
          type: string
          description: require to input address if it not found in customer. Prioritize keyboard input
        - in: body
          name: orderId
          type: string
          description: ID of order
          required: true
        - in: body
          name: content
          type: string
          description: content of suggest
          required: true
      responses:
        200:
          description: Create suggest successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Create suggest successfully.",
              "data": {
                "_id": "id",
                "customer": "string",
                "phone": "string",
                "address": "string",
                "orderId": "string",
                "content": "string",
              }
            }
        400:
          description: Mising data / invalid id
          schema:
            type: object
            example: {
            "error1": {
                "success": false,
                "message": "Invalid orderId. OrderID must be 8 characters",
              },
              "error2": {
                "success": false,
                "message": "Order not found.",
              },
              "error3": {
                "success": false,
                "message": "Missing required fields",
              },
            }
      security:
        - bearerAuth: []

  /admin/suggest:
    get:
      tags: 
        - "suggest"
      summary: get all suggest
      produces:
        - application/json
      responses:
        200:
          description: Get suggest successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get suggest successfully.",
              "data": [
                {
                  "_id": "id",
                  "customer": "string",
                  "phone": "string",
                  "address": "string",
                  "orderId": "string",
                  "content": "string",
                }
              ]
            }
        400:
          description: No suggest available
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Suggest not found.",
            }
  /admin/suggest/{customer_id}:
    get:
      tags: 
        - "suggest"
      summary: get suggest by customer id
      produces:
        - application/json
      parameters:
        - in: path
          name: customer_id
          type: string
          description: ID of a customer
          required: true
      responses:
        200:
          description: Get suggest successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get suggest successfully.",
              "data": [
                {
                  "_id": "id",
                  "customer": "string",
                  "phone": "string",
                  "address": "string",
                  "orderId": "string",
                  "content": "string",
                }
              ]
            }
        400:
          description: No suggest available
          schema:
            type: object
            example: {
              "success": "false",
              "message": "No suggest found.",
            }
  /admin/suggest/detail/{_id}:
    get:
      tags: 
        - "suggest"
      summary: get suggest by id
      produces:
        - application/json
      parameters:
        - in: path
          name: _id
          type: string
          description: ID of a suggest
          required: true
      responses:
        200:
          description: Get suggest successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get suggest successfully.",
              "data": {
                "_id": "id",
                "customer": "string",
                "phone": "string",
                "address": "string",
                "orderId": "string",
                "content": "string",
              }
            }
        400:
          description: No suggest available
          schema:
            type: object
            example: {
              "success": "false",
              "message": "No suggest found.",
            }
  /admin/suggest/{:_id}:
    delete:
      tags: 
        - "suggest"
      summary: delete suggest by id
      produces:
        - application/json
      parameters:
        - in: path
          name: _id
          type: string
          description: ID of a suggest
          required: true
      responses:
        200:
          description: Delete suggest successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Delete suggest successfully.",
              "data": {
                "_id": "id",
                "customer": "string",
                "phone": "string",
                "address": "string",
                "orderId": "string",
                "content": "string",
              }
            }
        400:
          description: Delete suggest failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Suggest not found.",
            }
  /address:
    get:
      tags: 
        - "address"
      summary: get an address list of a customer
      produces:
        - application/json
      responses:
        200:
          description: Get address successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get address list successfully.",
              "data": [
                {
                  "_id": "id",
                  "customer_id ": "string",
                  "phone": "string",
                  "name": "string",
                  "address": "string",
                  "province": "string",
                  "default_address": "boolean",
                }
              ]
            }
        400:
          description: No address available
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Address List not found.",
            }
      security:
        - bearerAuth: []
    post:
      tags: 
        - "address"
      summary: create an address of a customer
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: create an address of a customer
          required: true
          schema:
            type: object
            properties:
              phone:
                type: string
                example: "string"
              name:
                type: string
                example: "string"
              address:
                type: string
                example: "string"
              province:
                type: string
                example: "string"
              default_address:
                type: boolean
                example: "boolean"
      responses:
        200:
          description: Create address successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Add new address successfully.",
              "data": {
                "_id": "id",
                "customer_id ": "string",
                "phone": "string",
                "name": "string",
                "address": "string",
                "province": "string",
                "default_address": "boolean",
              }
            }
        400:
          description: Create address failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Invalid address.",
            }
      security:
        - bearerAuth: []
  /address/current:
    get:
      tags: 
        - "address"
      summary: get the current address of a customer
      produces:
        - application/json
      responses:
        200:
          description: Get address successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get address list successfully.",
              "data": {
                "_id": "id",
                "customer_id ": "string",
                "phone": "string",
                "name": "string",
                "address": "string",
                "province": "string",
                "default_address": "boolean",
              }
            }
        400:
          description: No address available
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Address not found.",
            }
      security:
        - bearerAuth: []
  /address/{address_id}:
    put:
      tags: 
        - "address"
      summary: update an address of a customer
      produces:
        - application/json
      parameters:
        - in: path
          name: address_id
          type: string
          description: ID of an address
          required: true
        - in: body
          name: body
          description: update an address of a customer
          required: true
          schema:
            type: object
            properties:
              customer_id:
                type: string
                example: "string"
              phone:
                type: string
                example: "string"
              name:
                type: string
                example: "string"
              address:
                type: string
                example: "string"
              province:
                type: string
                example: "string"
              default_address:
                type: boolean
                example: "boolean"
      responses:
        200:
          description: Update address successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Update address successfully.",
              "data": {
                "_id": "id",
                "customer_id ": "string",
                "phone": "string",
                "name": "string",
                "address": "string",
                "province": "string",
                "default_address": "boolean",
              }
            }
        400:
          description: Update address failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Update address failed.",
            }
      security:
        - bearerAuth: []
    delete:
      tags: 
        - "address"
      summary: delete an address of a customer
      produces:
        - application/json
      parameters:
        - in: path
          name: address_id
          type: string
          description: ID of an address
          required: true
      responses:
        200:
          description: Delete address successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Delete address successfully.",
              "data": {
                "_id": "id",
                "customer_id ": "string",
                "phone": "string",
                "name": "string",
                "address": "string",
                "province": "string",
                "default_address": "boolean",
              }
            }
        400:
          description: Delete address failed
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Delete address failed.",
            }
      security:
        - bearerAuth: []
  /admin/address:
    get:
      tags: 
        - "admin/address"
      summary: get all addresses
      produces:
        - application/json
      responses:
        200:
          description: Get address successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "get address information successfully.",
              "data": [
                {
                  "_id": "id",
                  "customer_id ": "string",
                  "phone": "string",
                  "name": "string",
                  "address": "string",
                  "province": "string",
                  "default_address": "boolean",
                }
              ]
            }
        400:
          description: No address available
          schema:
            type: object
            example: {
              "success": "false",
              "message": "address is not found.",
            }
  /admin/address/{id}:
    get:
      tags: 
        - "admin/address"
      summary: get an address by its id
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          type: string
          description: ID of an address
          required: true
      responses:
        200:
          description: Get address successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get address successfully.",
              "data": {
                "_id": "id",
                "customer_id ": "string",
                "phone": "string",
                "name": "string",
                "address": "string",
                "province": "string",
                "default_address": "boolean",
              }
            }
        400:
          description: No address available
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Address not found.",
            }
  /admin/address/customer/{customer_id}:
    get:
      tags: 
        - "admin/address"
      summary: get all addresses of a customer
      produces:
        - application/json
      parameters:
        - in: path
          name: customer_id
          type: string
          description: ID of a customer
          required: true
      responses:
        200:
          description: Get address successfully
          schema:
            type: object
            example: {
              "success": "true",
              "message": "Get address list successfully.",
              "data": [
                {
                  "_id": "id",
                  "customer_id ": "string",
                  "phone": "string",
                  "name": "string",
                  "address": "string",
                  "province": "string",
                  "default_address": "boolean",
                }
              ]
            }
        400:
          description: No address available
          schema:
            type: object
            example: {
              "success": "false",
              "message": "Address List not found.",
            }
  /admin/post-office:
    post:
        tags:
          - "post-office"
        summary: admin create new post office
        consumes:
          - application/json
        parameters:
        - in: body
          name: post office information
          required: true
          schema:
            type: object
            required: 
              - address
            properties:
              name:
                type: string
              province:
                type: string
              district:
                type: string
              address:
                type: string
        responses:
          200:
            description: Create new post office successfully
            schema:
              type: object
              example: {
                "success": true,
                "message": "Create new post office successfully.",
                "data": {
                  "province": "string",
                  "district": "string",
                  "address": "string",
                  "code": "string",
                  "_id": "string",
                  "createdAt": "string",
                  "updatedAt": "string",
                  "__v": 0,
                },
              }
          400: 
            description: 
            schema:
              type: object
              example: {
                "error": {
                  "success": false,
                  "message": [
                    "address field is required.",
                  ],
                },
              }
        security:
          - bearerAuth: []
    get:
        tags:
          - "post-office"
        summary: admin get post office
        consumes:
          - application/json
        responses:
          200:
            description: Get post office successfully
            schema:
              type: object
              example: {
                "success": true,
                "message": "Get post office successfully.",
                "data": [
                  {
                    "address": "string",
                    "code": "string",
                    "_id": "string",
                    "createdAt": "string",
                    "updatedAt": "string",
                    "__v": 0,
                  },
                ]
              }
        security:
          - bearerAuth: []
  /admin/post-office/{id}:
    patch:
        tags:
          - "post-office"
        summary: admin update new post office
        consumes:
          - application/json
        parameters:
        - in: path
          name: id
        - in: body
          name: post office information
          required: true
          schema:
            type: object
            required: 
              - address
            properties:
              name:
                type: string
              province:
                type: string
              district:
                type: string
              address:
                type: string
        responses:
          200:
            description: Update post office successfully
            schema:
              type: object
              example: {
                "success": true,
                "message": "Update post office successfully.",
                "data": {
                  "province": "string",
                  "district": "string",
                  "address": "string",
                  "code": "string",
                  "_id": "string",
                  "createdAt": "string",
                  "updatedAt": "string",
                  "__v": 0,
                },
              }
          400: 
            description: 
            schema:
              type: object
              example: {
                "error": {
                  "success": false,
                  "message": [
                    "address field is required.",
                  ],
                },
              }
        security:
          - bearerAuth: []
    delete:
        tags:
          - "post-office"
        summary: admin delete post office
        consumes:
          - application/json
        parameters:
        - in: path
          name: id
        responses:
          200:
            description: Delete post office successfully
            schema:
              type: object
              example: {
                "success": true,
                "message": "Delete post office successfully.",
                "data": {
                  "address": "string",
                  "code": "string",
                  "_id": "string",
                  "createdAt": "string",
                  "updatedAt": "string",
                  "__v": 0,
                },
              }
          400: 
            description: 
            schema:
              type: object
              example: {
                "error": {
                  "success": false,
                  "message": [
                    "address field is required.",
                  ],
                },
              }
        security:
          - bearerAuth: []
securityDefinitions:
  bearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"

  